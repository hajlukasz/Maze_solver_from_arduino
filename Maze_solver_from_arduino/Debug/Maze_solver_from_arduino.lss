
Maze_solver_from_arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000898  0000092c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000898  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800112  00800112  0000093e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000093e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000970  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b4d  00000000  00000000  00000a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000806  00000000  00000000  00001585  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000653  00000000  00000000  00001d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  000023e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a1  00000000  00000000  000025a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000066d  00000000  00000000  00002a45  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000030b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 17 01 	jmp	0x22e	; 0x22e <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e9       	ldi	r30, 0x98	; 152
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 31       	cpi	r26, 0x1C	; 28
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a4 02 	call	0x548	; 0x548 <main>
  9e:	0c 94 4a 04 	jmp	0x894	; 0x894 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_21>:
		else
		{
			pomiary_[i] = 0;
		}
	}
}
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
  b6:	ef 93       	push	r30
  b8:	ff 93       	push	r31
  ba:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  be:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	92 2b       	or	r25, r18
  c6:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  ca:	23 34       	cpi	r18, 0x43	; 67
  cc:	d9 f0       	breq	.+54     	; 0x104 <__vector_21+0x5e>
  ce:	28 f4       	brcc	.+10     	; 0xda <__vector_21+0x34>
  d0:	20 34       	cpi	r18, 0x40	; 64
  d2:	41 f0       	breq	.+16     	; 0xe4 <__vector_21+0x3e>
  d4:	21 34       	cpi	r18, 0x41	; 65
  d6:	71 f0       	breq	.+28     	; 0xf4 <__vector_21+0x4e>
  d8:	2c c0       	rjmp	.+88     	; 0x132 <__vector_21+0x8c>
  da:	24 34       	cpi	r18, 0x44	; 68
  dc:	d9 f0       	breq	.+54     	; 0x114 <__vector_21+0x6e>
  de:	25 34       	cpi	r18, 0x45	; 69
  e0:	09 f1       	breq	.+66     	; 0x124 <__vector_21+0x7e>
  e2:	27 c0       	rjmp	.+78     	; 0x132 <__vector_21+0x8c>
  e4:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x9>
  e8:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end+0x8>
  ec:	81 e4       	ldi	r24, 0x41	; 65
  ee:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  f2:	1f c0       	rjmp	.+62     	; 0x132 <__vector_21+0x8c>
  f4:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x7>
  f8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end+0x6>
  fc:	83 e4       	ldi	r24, 0x43	; 67
  fe:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 102:	17 c0       	rjmp	.+46     	; 0x132 <__vector_21+0x8c>
 104:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x3>
 108:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end+0x2>
 10c:	84 e4       	ldi	r24, 0x44	; 68
 10e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 112:	0f c0       	rjmp	.+30     	; 0x132 <__vector_21+0x8c>
 114:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 118:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 11c:	85 e4       	ldi	r24, 0x45	; 69
 11e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 122:	07 c0       	rjmp	.+14     	; 0x132 <__vector_21+0x8c>
 124:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x5>
 128:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end+0x4>
 12c:	80 e4       	ldi	r24, 0x40	; 64
 12e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 132:	ea e7       	ldi	r30, 0x7A	; 122
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	80 64       	ori	r24, 0x40	; 64
 13a:	80 83       	st	Z, r24
 13c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 140:	8d 32       	cpi	r24, 0x2D	; 45
 142:	11 f4       	brne	.+4      	; 0x148 <__vector_21+0xa2>
 144:	80 81       	ld	r24, Z
 146:	80 83       	st	Z, r24
 148:	ff 91       	pop	r31
 14a:	ef 91       	pop	r30
 14c:	9f 91       	pop	r25
 14e:	8f 91       	pop	r24
 150:	2f 91       	pop	r18
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <setupADC>:
 15c:	ea e7       	ldi	r30, 0x7A	; 122
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	84 60       	ori	r24, 0x04	; 4
 164:	80 83       	st	Z, r24
 166:	ac e7       	ldi	r26, 0x7C	; 124
 168:	b0 e0       	ldi	r27, 0x00	; 0
 16a:	8c 91       	ld	r24, X
 16c:	80 64       	ori	r24, 0x40	; 64
 16e:	8c 93       	st	X, r24
 170:	80 81       	ld	r24, Z
 172:	88 60       	ori	r24, 0x08	; 8
 174:	80 83       	st	Z, r24
 176:	80 81       	ld	r24, Z
 178:	80 68       	ori	r24, 0x80	; 128
 17a:	80 83       	st	Z, r24
 17c:	78 94       	sei
 17e:	80 81       	ld	r24, Z
 180:	80 64       	ori	r24, 0x40	; 64
 182:	80 83       	st	Z, r24
 184:	08 95       	ret

00000186 <setupPWM>:
 186:	84 b1       	in	r24, 0x04	; 4
 188:	86 60       	ori	r24, 0x06	; 6
 18a:	84 b9       	out	0x04, r24	; 4
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	9f ef       	ldi	r25, 0xFF	; 255
 190:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 194:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 198:	20 e0       	ldi	r18, 0x00	; 0
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	48 ec       	ldi	r20, 0xC8	; 200
 19e:	52 e4       	ldi	r21, 0x42	; 66
 1a0:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <dutyCycleA>
 1a4:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <dutyCycleA+0x1>
 1a8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dutyCycleA+0x2>
 1ac:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dutyCycleA+0x3>
 1b0:	0e 94 c3 02 	call	0x586	; 0x586 <__divsf3>
 1b4:	20 e0       	ldi	r18, 0x00	; 0
 1b6:	3f ef       	ldi	r19, 0xFF	; 255
 1b8:	4f e7       	ldi	r20, 0x7F	; 127
 1ba:	57 e4       	ldi	r21, 0x47	; 71
 1bc:	0e 94 b5 03 	call	0x76a	; 0x76a <__mulsf3>
 1c0:	0e 94 35 03 	call	0x66a	; 0x66a <__fixunssfsi>
 1c4:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1c8:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1cc:	20 e0       	ldi	r18, 0x00	; 0
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	48 ec       	ldi	r20, 0xC8	; 200
 1d2:	52 e4       	ldi	r21, 0x42	; 66
 1d4:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 1d8:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 1dc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 1e0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 1e4:	0e 94 c3 02 	call	0x586	; 0x586 <__divsf3>
 1e8:	20 e0       	ldi	r18, 0x00	; 0
 1ea:	3f ef       	ldi	r19, 0xFF	; 255
 1ec:	4f e7       	ldi	r20, 0x7F	; 127
 1ee:	57 e4       	ldi	r21, 0x47	; 71
 1f0:	0e 94 b5 03 	call	0x76a	; 0x76a <__mulsf3>
 1f4:	0e 94 35 03 	call	0x66a	; 0x66a <__fixunssfsi>
 1f8:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 1fc:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 200:	78 94       	sei
 202:	e0 e8       	ldi	r30, 0x80	; 128
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	80 6a       	ori	r24, 0xA0	; 160
 20a:	80 83       	st	Z, r24
 20c:	80 81       	ld	r24, Z
 20e:	82 60       	ori	r24, 0x02	; 2
 210:	80 83       	st	Z, r24
 212:	e1 e8       	ldi	r30, 0x81	; 129
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	88 61       	ori	r24, 0x18	; 24
 21a:	80 83       	st	Z, r24
 21c:	af e6       	ldi	r26, 0x6F	; 111
 21e:	b0 e0       	ldi	r27, 0x00	; 0
 220:	8c 91       	ld	r24, X
 222:	81 60       	ori	r24, 0x01	; 1
 224:	8c 93       	st	X, r24
 226:	80 81       	ld	r24, Z
 228:	81 60       	ori	r24, 0x01	; 1
 22a:	80 83       	st	Z, r24
 22c:	08 95       	ret

0000022e <__vector_13>:
 22e:	1f 92       	push	r1
 230:	0f 92       	push	r0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1
 238:	2f 93       	push	r18
 23a:	3f 93       	push	r19
 23c:	4f 93       	push	r20
 23e:	5f 93       	push	r21
 240:	6f 93       	push	r22
 242:	7f 93       	push	r23
 244:	8f 93       	push	r24
 246:	9f 93       	push	r25
 248:	af 93       	push	r26
 24a:	bf 93       	push	r27
 24c:	ef 93       	push	r30
 24e:	ff 93       	push	r31
 250:	20 e0       	ldi	r18, 0x00	; 0
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	4f e7       	ldi	r20, 0x7F	; 127
 256:	53 e4       	ldi	r21, 0x43	; 67
 258:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <dutyCycleA>
 25c:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <dutyCycleA+0x1>
 260:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dutyCycleA+0x2>
 264:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dutyCycleA+0x3>
 268:	0e 94 c3 02 	call	0x586	; 0x586 <__divsf3>
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	3f ef       	ldi	r19, 0xFF	; 255
 270:	4f e7       	ldi	r20, 0x7F	; 127
 272:	57 e4       	ldi	r21, 0x47	; 71
 274:	0e 94 b5 03 	call	0x76a	; 0x76a <__mulsf3>
 278:	0e 94 35 03 	call	0x66a	; 0x66a <__fixunssfsi>
 27c:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 280:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 284:	20 e0       	ldi	r18, 0x00	; 0
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	4f e7       	ldi	r20, 0x7F	; 127
 28a:	53 e4       	ldi	r21, 0x43	; 67
 28c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 290:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 294:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 298:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 29c:	0e 94 c3 02 	call	0x586	; 0x586 <__divsf3>
 2a0:	20 e0       	ldi	r18, 0x00	; 0
 2a2:	3f ef       	ldi	r19, 0xFF	; 255
 2a4:	4f e7       	ldi	r20, 0x7F	; 127
 2a6:	57 e4       	ldi	r21, 0x47	; 71
 2a8:	0e 94 b5 03 	call	0x76a	; 0x76a <__mulsf3>
 2ac:	0e 94 35 03 	call	0x66a	; 0x66a <__fixunssfsi>
 2b0:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 2b4:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 2b8:	ff 91       	pop	r31
 2ba:	ef 91       	pop	r30
 2bc:	bf 91       	pop	r27
 2be:	af 91       	pop	r26
 2c0:	9f 91       	pop	r25
 2c2:	8f 91       	pop	r24
 2c4:	7f 91       	pop	r23
 2c6:	6f 91       	pop	r22
 2c8:	5f 91       	pop	r21
 2ca:	4f 91       	pop	r20
 2cc:	3f 91       	pop	r19
 2ce:	2f 91       	pop	r18
 2d0:	0f 90       	pop	r0
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	0f 90       	pop	r0
 2d6:	1f 90       	pop	r1
 2d8:	18 95       	reti

000002da <kalibracja>:




void kalibracja()
 {
 2da:	4f 92       	push	r4
 2dc:	5f 92       	push	r5
 2de:	6f 92       	push	r6
 2e0:	7f 92       	push	r7
 2e2:	8f 92       	push	r8
 2e4:	9f 92       	push	r9
 2e6:	af 92       	push	r10
 2e8:	bf 92       	push	r11
 2ea:	cf 92       	push	r12
 2ec:	df 92       	push	r13
 2ee:	ef 92       	push	r14
 2f0:	ff 92       	push	r15
 2f2:	0f 93       	push	r16
 2f4:	1f 93       	push	r17
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	cd b7       	in	r28, 0x3d	; 61
 2fc:	de b7       	in	r29, 0x3e	; 62
 2fe:	c4 56       	subi	r28, 0x64	; 100
 300:	d1 09       	sbc	r29, r1
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	f8 94       	cli
 306:	de bf       	out	0x3e, r29	; 62
 308:	0f be       	out	0x3f, r0	; 63
 30a:	cd bf       	out	0x3d, r28	; 61
	int roznica = 135;                //zmien jesli chcesz zeby łapał jedynke przy wiekszej zmianie
	int pomiary_kalibracja[10][5];   //tablica na potrzebne pomiary


	//petla z takimi warunnkami zeby mi nie wyszla głupota [case np jak stoi jednym czujnikiem przypadkiem na lini zamiast na podłozu]
	while(zkalibrowane[0] > 600 || zkalibrowane[1] > 600 || zkalibrowane[2] > 600 || zkalibrowane[3] > 600 || zkalibrowane[4] > 600)
 30c:	0f 2e       	mov	r0, r31
 30e:	f8 e0       	ldi	r31, 0x08	; 8
 310:	6f 2e       	mov	r6, r31
 312:	f1 e0       	ldi	r31, 0x01	; 1
 314:	7f 2e       	mov	r7, r31
 316:	f0 2d       	mov	r31, r0
 318:	6e 01       	movw	r12, r28
 31a:	25 e6       	ldi	r18, 0x65	; 101
 31c:	c2 0e       	add	r12, r18
 31e:	d1 1c       	adc	r13, r1
	{             
		
		for (int i = 0 ; i<10 ; i++)
		{
			setupADC();
			pomiary_kalibracja[i][0] = pomiary[0];
 320:	0f 2e       	mov	r0, r31
 322:	f2 e1       	ldi	r31, 0x12	; 18
 324:	ef 2e       	mov	r14, r31
 326:	f1 e0       	ldi	r31, 0x01	; 1
 328:	ff 2e       	mov	r15, r31
 32a:	f0 2d       	mov	r31, r0
			suma[3] = pomiary_kalibracja[i][3] + suma[3];
			suma[4] = pomiary_kalibracja[i][4] + suma[4];
		}

		// nie jest w petli zeby miec dostep do poszczegolnych i je sobie modyfikowac w miare potrzeby
		zkalibrowane[0] = suma[0] / 10 + roznica;
 32c:	0f 2e       	mov	r0, r31
 32e:	fa e0       	ldi	r31, 0x0A	; 10
 330:	4f 2e       	mov	r4, r31
 332:	51 2c       	mov	r5, r1
 334:	f0 2d       	mov	r31, r0
	int roznica = 135;                //zmien jesli chcesz zeby łapał jedynke przy wiekszej zmianie
	int pomiary_kalibracja[10][5];   //tablica na potrzebne pomiary


	//petla z takimi warunnkami zeby mi nie wyszla głupota [case np jak stoi jednym czujnikiem przypadkiem na lini zamiast na podłozu]
	while(zkalibrowane[0] > 600 || zkalibrowane[1] > 600 || zkalibrowane[2] > 600 || zkalibrowane[3] > 600 || zkalibrowane[4] > 600)
 336:	8c c0       	rjmp	.+280    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
	{             
		
		for (int i = 0 ; i<10 ; i++)
		{
			setupADC();
 338:	0e 94 ae 00 	call	0x15c	; 0x15c <setupADC>
			pomiary_kalibracja[i][0] = pomiary[0];
 33c:	d7 01       	movw	r26, r14
 33e:	8d 91       	ld	r24, X+
 340:	9c 91       	ld	r25, X
 342:	11 97       	sbiw	r26, 0x01	; 1
 344:	f5 01       	movw	r30, r10
 346:	91 83       	std	Z+1, r25	; 0x01
 348:	80 83       	st	Z, r24
			pomiary_kalibracja[i][1] = pomiary[1];
 34a:	12 96       	adiw	r26, 0x02	; 2
 34c:	8d 91       	ld	r24, X+
 34e:	9c 91       	ld	r25, X
 350:	13 97       	sbiw	r26, 0x03	; 3
 352:	93 83       	std	Z+3, r25	; 0x03
 354:	82 83       	std	Z+2, r24	; 0x02
			pomiary_kalibracja[i][2] = pomiary[2];
 356:	14 96       	adiw	r26, 0x04	; 4
 358:	8d 91       	ld	r24, X+
 35a:	9c 91       	ld	r25, X
 35c:	15 97       	sbiw	r26, 0x05	; 5
 35e:	95 83       	std	Z+5, r25	; 0x05
 360:	84 83       	std	Z+4, r24	; 0x04
			pomiary_kalibracja[i][3] = pomiary[3];
 362:	16 96       	adiw	r26, 0x06	; 6
 364:	8d 91       	ld	r24, X+
 366:	9c 91       	ld	r25, X
 368:	17 97       	sbiw	r26, 0x07	; 7
 36a:	97 83       	std	Z+7, r25	; 0x07
 36c:	86 83       	std	Z+6, r24	; 0x06
			pomiary_kalibracja[i][4] = pomiary[4];
 36e:	18 96       	adiw	r26, 0x08	; 8
 370:	8d 91       	ld	r24, X+
 372:	9c 91       	ld	r25, X
 374:	19 97       	sbiw	r26, 0x09	; 9
 376:	91 87       	std	Z+9, r25	; 0x09
 378:	80 87       	std	Z+8, r24	; 0x08
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37a:	ff ef       	ldi	r31, 0xFF	; 255
 37c:	20 e7       	ldi	r18, 0x70	; 112
 37e:	82 e0       	ldi	r24, 0x02	; 2
 380:	f1 50       	subi	r31, 0x01	; 1
 382:	20 40       	sbci	r18, 0x00	; 0
 384:	80 40       	sbci	r24, 0x00	; 0
 386:	e1 f7       	brne	.-8      	; 0x380 <kalibracja+0xa6>
 388:	00 c0       	rjmp	.+0      	; 0x38a <kalibracja+0xb0>
 38a:	00 00       	nop
 38c:	9a e0       	ldi	r25, 0x0A	; 10
 38e:	a9 0e       	add	r10, r25
 390:	b1 1c       	adc	r11, r1

	//petla z takimi warunnkami zeby mi nie wyszla głupota [case np jak stoi jednym czujnikiem przypadkiem na lini zamiast na podłozu]
	while(zkalibrowane[0] > 600 || zkalibrowane[1] > 600 || zkalibrowane[2] > 600 || zkalibrowane[3] > 600 || zkalibrowane[4] > 600)
	{             
		
		for (int i = 0 ; i<10 ; i++)
 392:	ca 14       	cp	r12, r10
 394:	db 04       	cpc	r13, r11
 396:	81 f6       	brne	.-96     	; 0x338 <kalibracja+0x5e>
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	81 2c       	mov	r8, r1
 39e:	91 2c       	mov	r9, r1
 3a0:	a1 2c       	mov	r10, r1
 3a2:	b1 2c       	mov	r11, r1
 3a4:	e0 e0       	ldi	r30, 0x00	; 0
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	20 e0       	ldi	r18, 0x00	; 0
 3aa:	30 e0       	ldi	r19, 0x00	; 0

		int suma[5] = {0,0,0,0,0};
		
		for (int i = 0 ; i<10 ; i++)
		{
			suma[0] = pomiary_kalibracja[i][0] + suma[0];
 3ac:	d8 01       	movw	r26, r16
 3ae:	4d 91       	ld	r20, X+
 3b0:	5c 91       	ld	r21, X
 3b2:	11 97       	sbiw	r26, 0x01	; 1
 3b4:	84 0f       	add	r24, r20
 3b6:	95 1f       	adc	r25, r21
			suma[1] = pomiary_kalibracja[i][1] + suma[1];
 3b8:	12 96       	adiw	r26, 0x02	; 2
 3ba:	4d 91       	ld	r20, X+
 3bc:	5c 91       	ld	r21, X
 3be:	13 97       	sbiw	r26, 0x03	; 3
 3c0:	84 0e       	add	r8, r20
 3c2:	95 1e       	adc	r9, r21
			suma[2] = pomiary_kalibracja[i][2] + suma[2];
 3c4:	14 96       	adiw	r26, 0x04	; 4
 3c6:	4d 91       	ld	r20, X+
 3c8:	5c 91       	ld	r21, X
 3ca:	15 97       	sbiw	r26, 0x05	; 5
 3cc:	a4 0e       	add	r10, r20
 3ce:	b5 1e       	adc	r11, r21
			suma[3] = pomiary_kalibracja[i][3] + suma[3];
 3d0:	16 96       	adiw	r26, 0x06	; 6
 3d2:	4d 91       	ld	r20, X+
 3d4:	5c 91       	ld	r21, X
 3d6:	17 97       	sbiw	r26, 0x07	; 7
 3d8:	e4 0f       	add	r30, r20
 3da:	f5 1f       	adc	r31, r21
			suma[4] = pomiary_kalibracja[i][4] + suma[4];
 3dc:	18 96       	adiw	r26, 0x08	; 8
 3de:	4d 91       	ld	r20, X+
 3e0:	5c 91       	ld	r21, X
 3e2:	19 97       	sbiw	r26, 0x09	; 9
 3e4:	24 0f       	add	r18, r20
 3e6:	35 1f       	adc	r19, r21
 3e8:	06 5f       	subi	r16, 0xF6	; 246
 3ea:	1f 4f       	sbci	r17, 0xFF	; 255
			_delay_ms(50);
		};

		int suma[5] = {0,0,0,0,0};
		
		for (int i = 0 ; i<10 ; i++)
 3ec:	0c 15       	cp	r16, r12
 3ee:	1d 05       	cpc	r17, r13
 3f0:	e9 f6       	brne	.-70     	; 0x3ac <kalibracja+0xd2>
			suma[3] = pomiary_kalibracja[i][3] + suma[3];
			suma[4] = pomiary_kalibracja[i][4] + suma[4];
		}

		// nie jest w petli zeby miec dostep do poszczegolnych i je sobie modyfikowac w miare potrzeby
		zkalibrowane[0] = suma[0] / 10 + roznica;
 3f2:	b2 01       	movw	r22, r4
 3f4:	0e 94 22 04 	call	0x844	; 0x844 <__divmodhi4>
 3f8:	69 57       	subi	r22, 0x79	; 121
 3fa:	7f 4f       	sbci	r23, 0xFF	; 255
 3fc:	d3 01       	movw	r26, r6
 3fe:	6d 93       	st	X+, r22
 400:	7c 93       	st	X, r23
		zkalibrowane[1] = suma[1] /10 + roznica;
 402:	c4 01       	movw	r24, r8
 404:	b2 01       	movw	r22, r4
 406:	0e 94 22 04 	call	0x844	; 0x844 <__divmodhi4>
 40a:	69 57       	subi	r22, 0x79	; 121
 40c:	7f 4f       	sbci	r23, 0xFF	; 255
 40e:	d3 01       	movw	r26, r6
 410:	13 96       	adiw	r26, 0x03	; 3
 412:	7c 93       	st	X, r23
 414:	6e 93       	st	-X, r22
 416:	12 97       	sbiw	r26, 0x02	; 2
		zkalibrowane[2] = suma[2] /10 + roznica - 35; //odjalem bo srodek jest kluczowy w slepych uliczkach
 418:	c5 01       	movw	r24, r10
 41a:	b2 01       	movw	r22, r4
 41c:	0e 94 22 04 	call	0x844	; 0x844 <__divmodhi4>
 420:	6c 59       	subi	r22, 0x9C	; 156
 422:	7f 4f       	sbci	r23, 0xFF	; 255
 424:	d3 01       	movw	r26, r6
 426:	15 96       	adiw	r26, 0x05	; 5
 428:	7c 93       	st	X, r23
 42a:	6e 93       	st	-X, r22
 42c:	14 97       	sbiw	r26, 0x04	; 4
		zkalibrowane[3] = suma[3] /10 + roznica;
 42e:	cf 01       	movw	r24, r30
 430:	b2 01       	movw	r22, r4
 432:	0e 94 22 04 	call	0x844	; 0x844 <__divmodhi4>
 436:	69 57       	subi	r22, 0x79	; 121
 438:	7f 4f       	sbci	r23, 0xFF	; 255
 43a:	f3 01       	movw	r30, r6
 43c:	77 83       	std	Z+7, r23	; 0x07
 43e:	66 83       	std	Z+6, r22	; 0x06
		zkalibrowane[4] = suma[4] /10 + roznica;
 440:	c9 01       	movw	r24, r18
 442:	b2 01       	movw	r22, r4
 444:	0e 94 22 04 	call	0x844	; 0x844 <__divmodhi4>
 448:	69 57       	subi	r22, 0x79	; 121
 44a:	7f 4f       	sbci	r23, 0xFF	; 255
 44c:	71 87       	std	Z+9, r23	; 0x09
 44e:	60 87       	std	Z+8, r22	; 0x08
	int roznica = 135;                //zmien jesli chcesz zeby łapał jedynke przy wiekszej zmianie
	int pomiary_kalibracja[10][5];   //tablica na potrzebne pomiary


	//petla z takimi warunnkami zeby mi nie wyszla głupota [case np jak stoi jednym czujnikiem przypadkiem na lini zamiast na podłozu]
	while(zkalibrowane[0] > 600 || zkalibrowane[1] > 600 || zkalibrowane[2] > 600 || zkalibrowane[3] > 600 || zkalibrowane[4] > 600)
 450:	d3 01       	movw	r26, r6
 452:	8d 91       	ld	r24, X+
 454:	9c 91       	ld	r25, X
 456:	89 35       	cpi	r24, 0x59	; 89
 458:	92 40       	sbci	r25, 0x02	; 2
 45a:	34 f4       	brge	.+12     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 45c:	f3 01       	movw	r30, r6
 45e:	82 81       	ldd	r24, Z+2	; 0x02
 460:	93 81       	ldd	r25, Z+3	; 0x03
 462:	89 35       	cpi	r24, 0x59	; 89
 464:	92 40       	sbci	r25, 0x02	; 2
 466:	2c f0       	brlt	.+10     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 468:	8e 01       	movw	r16, r28
 46a:	0f 5f       	subi	r16, 0xFF	; 255
 46c:	1f 4f       	sbci	r17, 0xFF	; 255




void kalibracja()
 {
 46e:	58 01       	movw	r10, r16
 470:	63 cf       	rjmp	.-314    	; 0x338 <kalibracja+0x5e>
	int roznica = 135;                //zmien jesli chcesz zeby łapał jedynke przy wiekszej zmianie
	int pomiary_kalibracja[10][5];   //tablica na potrzebne pomiary


	//petla z takimi warunnkami zeby mi nie wyszla głupota [case np jak stoi jednym czujnikiem przypadkiem na lini zamiast na podłozu]
	while(zkalibrowane[0] > 600 || zkalibrowane[1] > 600 || zkalibrowane[2] > 600 || zkalibrowane[3] > 600 || zkalibrowane[4] > 600)
 472:	d3 01       	movw	r26, r6
 474:	14 96       	adiw	r26, 0x04	; 4
 476:	8d 91       	ld	r24, X+
 478:	9c 91       	ld	r25, X
 47a:	15 97       	sbiw	r26, 0x05	; 5
 47c:	89 35       	cpi	r24, 0x59	; 89
 47e:	92 40       	sbci	r25, 0x02	; 2
 480:	9c f7       	brge	.-26     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 482:	f3 01       	movw	r30, r6
 484:	86 81       	ldd	r24, Z+6	; 0x06
 486:	97 81       	ldd	r25, Z+7	; 0x07
 488:	89 35       	cpi	r24, 0x59	; 89
 48a:	92 40       	sbci	r25, 0x02	; 2
 48c:	6c f7       	brge	.-38     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 48e:	d3 01       	movw	r26, r6
 490:	18 96       	adiw	r26, 0x08	; 8
 492:	8d 91       	ld	r24, X+
 494:	9c 91       	ld	r25, X
 496:	19 97       	sbiw	r26, 0x09	; 9
 498:	89 35       	cpi	r24, 0x59	; 89
 49a:	92 40       	sbci	r25, 0x02	; 2
 49c:	2c f7       	brge	.-54     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
		zkalibrowane[3] = suma[3] /10 + roznica;
		zkalibrowane[4] = suma[4] /10 + roznica;
		
	}

	DDRB |= (1 << DDB4);
 49e:	24 9a       	sbi	0x04, 4	; 4
	PORTB |= (1 << PORTB4); // zapala diode sygnalizujac ze kalibracja sie udala i ruszy za 2 sek
 4a0:	2c 9a       	sbi	0x05, 4	; 5
 4a2:	ef ef       	ldi	r30, 0xFF	; 255
 4a4:	f7 ea       	ldi	r31, 0xA7	; 167
 4a6:	21 e6       	ldi	r18, 0x61	; 97
 4a8:	e1 50       	subi	r30, 0x01	; 1
 4aa:	f0 40       	sbci	r31, 0x00	; 0
 4ac:	20 40       	sbci	r18, 0x00	; 0
 4ae:	e1 f7       	brne	.-8      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 4b2:	00 00       	nop
	_delay_ms(2000);  
}
 4b4:	cc 59       	subi	r28, 0x9C	; 156
 4b6:	df 4f       	sbci	r29, 0xFF	; 255
 4b8:	0f b6       	in	r0, 0x3f	; 63
 4ba:	f8 94       	cli
 4bc:	de bf       	out	0x3e, r29	; 62
 4be:	0f be       	out	0x3f, r0	; 63
 4c0:	cd bf       	out	0x3d, r28	; 61
 4c2:	df 91       	pop	r29
 4c4:	cf 91       	pop	r28
 4c6:	1f 91       	pop	r17
 4c8:	0f 91       	pop	r16
 4ca:	ff 90       	pop	r15
 4cc:	ef 90       	pop	r14
 4ce:	df 90       	pop	r13
 4d0:	cf 90       	pop	r12
 4d2:	bf 90       	pop	r11
 4d4:	af 90       	pop	r10
 4d6:	9f 90       	pop	r9
 4d8:	8f 90       	pop	r8
 4da:	7f 90       	pop	r7
 4dc:	6f 90       	pop	r6
 4de:	5f 90       	pop	r5
 4e0:	4f 90       	pop	r4
 4e2:	08 95       	ret

000004e4 <delay_ms>:


//ze wzgledu na to ze funkcja _delay_ms nie pozwala na uzywanie zmiennej 
void delay_ms(uint16_t count) 
{
	while(count--)
 4e4:	00 97       	sbiw	r24, 0x00	; 0
 4e6:	41 f0       	breq	.+16     	; 0x4f8 <delay_ms+0x14>
 4e8:	ef e9       	ldi	r30, 0x9F	; 159
 4ea:	ff e0       	ldi	r31, 0x0F	; 15
 4ec:	31 97       	sbiw	r30, 0x01	; 1
 4ee:	f1 f7       	brne	.-4      	; 0x4ec <delay_ms+0x8>
 4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <delay_ms+0xe>
 4f2:	00 00       	nop
 4f4:	01 97       	sbiw	r24, 0x01	; 1
 4f6:	c1 f7       	brne	.-16     	; 0x4e8 <delay_ms+0x4>
 4f8:	08 95       	ret

000004fa <prosto>:
//-------------------------------------------------------------------

void prosto(int czas)
{
	
	PORTD |= (1 << In1);
 4fa:	5e 9a       	sbi	0x0b, 6	; 11
	PORTD |= (1 << In3);
 4fc:	5c 9a       	sbi	0x0b, 4	; 11
	
	delay_ms(czas);
 4fe:	0e 94 72 02 	call	0x4e4	; 0x4e4 <delay_ms>
	
	PORTD &= ~(1 << In1);
 502:	5e 98       	cbi	0x0b, 6	; 11
	PORTD &= ~(1 << In3);
 504:	5c 98       	cbi	0x0b, 4	; 11
 506:	08 95       	ret

00000508 <cofaj>:
//-------------------------------------------------------------------

void cofaj(int czas)
{

	PORTD |= (1 << In2);
 508:	5f 9a       	sbi	0x0b, 7	; 11
	PORTD |= (1 << In4);
 50a:	5d 9a       	sbi	0x0b, 5	; 11

	delay_ms(czas);
 50c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <delay_ms>

	PORTD &= ~(1 << In2);
 510:	5f 98       	cbi	0x0b, 7	; 11
	PORTD &= ~(1 << In4);
 512:	5d 98       	cbi	0x0b, 5	; 11
 514:	08 95       	ret

00000516 <w_prawo>:
//-------------------------------------------------------------------

void w_prawo (int czas)
{

	PORTD |= (1 << In3);
 516:	5c 9a       	sbi	0x0b, 4	; 11
	PORTD |= (1 << In2);
 518:	5f 9a       	sbi	0x0b, 7	; 11

	delay_ms(czas);
 51a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <delay_ms>
	
	PORTD &= ~(1 << In3);
 51e:	5c 98       	cbi	0x0b, 4	; 11
	PORTD &= ~(1 << In2);
 520:	5f 98       	cbi	0x0b, 7	; 11
 522:	08 95       	ret

00000524 <w_lewo>:
//-------------------------------------------------------------------

void w_lewo (int czas)
{
	
	PORTD |= (1 << In1);
 524:	5e 9a       	sbi	0x0b, 6	; 11
	PORTD |= (1 << In4);
 526:	5d 9a       	sbi	0x0b, 5	; 11

	delay_ms(czas);
 528:	0e 94 72 02 	call	0x4e4	; 0x4e4 <delay_ms>
	
	PORTD &= ~(1 << In1);
 52c:	5e 98       	cbi	0x0b, 6	; 11
	PORTD &= ~(1 << In4);
 52e:	5d 98       	cbi	0x0b, 5	; 11
 530:	08 95       	ret

00000532 <USART_Init>:
{
	/*Set baud rate */
	/* UBRR0H contains the 4 most significant bits of the
	baud rate. UBRR0L contains the 8 least significant
	bits.*/  
	UBRR0H = (unsigned char)(ubrr>>8);
 532:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
 536:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	

	/*Enable transmitter */
	UCSR0B = (1<<TXEN0);
 53a:	88 e0       	ldi	r24, 0x08	; 8
 53c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	/* Set frame format: 8data */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 540:	8e e0       	ldi	r24, 0x0E	; 14
 542:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 546:	08 95       	ret

00000548 <main>:
double dutyCycleB = 110;		//zmienna double bo z intem nie dziala


int main(void)
{
	DDRD |= 0b11110000;
 548:	8a b1       	in	r24, 0x0a	; 10
 54a:	80 6f       	ori	r24, 0xF0	; 240
 54c:	8a b9       	out	0x0a, r24	; 10
	DDRB |= 0b00000011;
 54e:	84 b1       	in	r24, 0x04	; 4
 550:	83 60       	ori	r24, 0x03	; 3
 552:	84 b9       	out	0x04, r24	; 4
	//PORTB |= (1 << EnA) | (1 << EnB);
    USART_Init(MYUBRR);
 554:	87 e6       	ldi	r24, 0x67	; 103
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	0e 94 99 02 	call	0x532	; 0x532 <USART_Init>
	kalibracja();
 55c:	0e 94 6d 01 	call	0x2da	; 0x2da <kalibracja>
	setupPWM();
 560:	0e 94 c3 00 	call	0x186	; 0x186 <setupPWM>
	
    while (1) 
    {
		prosto(200);
 564:	88 ec       	ldi	r24, 0xC8	; 200
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	0e 94 7d 02 	call	0x4fa	; 0x4fa <prosto>
		cofaj(200);
 56c:	88 ec       	ldi	r24, 0xC8	; 200
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	0e 94 84 02 	call	0x508	; 0x508 <cofaj>
		w_prawo(200);
 574:	88 ec       	ldi	r24, 0xC8	; 200
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	0e 94 8b 02 	call	0x516	; 0x516 <w_prawo>
		w_lewo(200);
 57c:	88 ec       	ldi	r24, 0xC8	; 200
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 92 02 	call	0x524	; 0x524 <w_lewo>
 584:	ef cf       	rjmp	.-34     	; 0x564 <main+0x1c>

00000586 <__divsf3>:
 586:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__divsf3x>
 58a:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__fp_round>
 58e:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__fp_pscB>
 592:	58 f0       	brcs	.+22     	; 0x5aa <__divsf3+0x24>
 594:	0e 94 6d 03 	call	0x6da	; 0x6da <__fp_pscA>
 598:	40 f0       	brcs	.+16     	; 0x5aa <__divsf3+0x24>
 59a:	29 f4       	brne	.+10     	; 0x5a6 <__divsf3+0x20>
 59c:	5f 3f       	cpi	r21, 0xFF	; 255
 59e:	29 f0       	breq	.+10     	; 0x5aa <__divsf3+0x24>
 5a0:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__fp_inf>
 5a4:	51 11       	cpse	r21, r1
 5a6:	0c 94 af 03 	jmp	0x75e	; 0x75e <__fp_szero>
 5aa:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__fp_nan>

000005ae <__divsf3x>:
 5ae:	0e 94 8c 03 	call	0x718	; 0x718 <__fp_split3>
 5b2:	68 f3       	brcs	.-38     	; 0x58e <__divsf3+0x8>

000005b4 <__divsf3_pse>:
 5b4:	99 23       	and	r25, r25
 5b6:	b1 f3       	breq	.-20     	; 0x5a4 <__divsf3+0x1e>
 5b8:	55 23       	and	r21, r21
 5ba:	91 f3       	breq	.-28     	; 0x5a0 <__divsf3+0x1a>
 5bc:	95 1b       	sub	r25, r21
 5be:	55 0b       	sbc	r21, r21
 5c0:	bb 27       	eor	r27, r27
 5c2:	aa 27       	eor	r26, r26
 5c4:	62 17       	cp	r22, r18
 5c6:	73 07       	cpc	r23, r19
 5c8:	84 07       	cpc	r24, r20
 5ca:	38 f0       	brcs	.+14     	; 0x5da <__divsf3_pse+0x26>
 5cc:	9f 5f       	subi	r25, 0xFF	; 255
 5ce:	5f 4f       	sbci	r21, 0xFF	; 255
 5d0:	22 0f       	add	r18, r18
 5d2:	33 1f       	adc	r19, r19
 5d4:	44 1f       	adc	r20, r20
 5d6:	aa 1f       	adc	r26, r26
 5d8:	a9 f3       	breq	.-22     	; 0x5c4 <__divsf3_pse+0x10>
 5da:	35 d0       	rcall	.+106    	; 0x646 <__divsf3_pse+0x92>
 5dc:	0e 2e       	mov	r0, r30
 5de:	3a f0       	brmi	.+14     	; 0x5ee <__divsf3_pse+0x3a>
 5e0:	e0 e8       	ldi	r30, 0x80	; 128
 5e2:	32 d0       	rcall	.+100    	; 0x648 <__divsf3_pse+0x94>
 5e4:	91 50       	subi	r25, 0x01	; 1
 5e6:	50 40       	sbci	r21, 0x00	; 0
 5e8:	e6 95       	lsr	r30
 5ea:	00 1c       	adc	r0, r0
 5ec:	ca f7       	brpl	.-14     	; 0x5e0 <__divsf3_pse+0x2c>
 5ee:	2b d0       	rcall	.+86     	; 0x646 <__divsf3_pse+0x92>
 5f0:	fe 2f       	mov	r31, r30
 5f2:	29 d0       	rcall	.+82     	; 0x646 <__divsf3_pse+0x92>
 5f4:	66 0f       	add	r22, r22
 5f6:	77 1f       	adc	r23, r23
 5f8:	88 1f       	adc	r24, r24
 5fa:	bb 1f       	adc	r27, r27
 5fc:	26 17       	cp	r18, r22
 5fe:	37 07       	cpc	r19, r23
 600:	48 07       	cpc	r20, r24
 602:	ab 07       	cpc	r26, r27
 604:	b0 e8       	ldi	r27, 0x80	; 128
 606:	09 f0       	breq	.+2      	; 0x60a <__divsf3_pse+0x56>
 608:	bb 0b       	sbc	r27, r27
 60a:	80 2d       	mov	r24, r0
 60c:	bf 01       	movw	r22, r30
 60e:	ff 27       	eor	r31, r31
 610:	93 58       	subi	r25, 0x83	; 131
 612:	5f 4f       	sbci	r21, 0xFF	; 255
 614:	3a f0       	brmi	.+14     	; 0x624 <__divsf3_pse+0x70>
 616:	9e 3f       	cpi	r25, 0xFE	; 254
 618:	51 05       	cpc	r21, r1
 61a:	78 f0       	brcs	.+30     	; 0x63a <__divsf3_pse+0x86>
 61c:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__fp_inf>
 620:	0c 94 af 03 	jmp	0x75e	; 0x75e <__fp_szero>
 624:	5f 3f       	cpi	r21, 0xFF	; 255
 626:	e4 f3       	brlt	.-8      	; 0x620 <__divsf3_pse+0x6c>
 628:	98 3e       	cpi	r25, 0xE8	; 232
 62a:	d4 f3       	brlt	.-12     	; 0x620 <__divsf3_pse+0x6c>
 62c:	86 95       	lsr	r24
 62e:	77 95       	ror	r23
 630:	67 95       	ror	r22
 632:	b7 95       	ror	r27
 634:	f7 95       	ror	r31
 636:	9f 5f       	subi	r25, 0xFF	; 255
 638:	c9 f7       	brne	.-14     	; 0x62c <__divsf3_pse+0x78>
 63a:	88 0f       	add	r24, r24
 63c:	91 1d       	adc	r25, r1
 63e:	96 95       	lsr	r25
 640:	87 95       	ror	r24
 642:	97 f9       	bld	r25, 7
 644:	08 95       	ret
 646:	e1 e0       	ldi	r30, 0x01	; 1
 648:	66 0f       	add	r22, r22
 64a:	77 1f       	adc	r23, r23
 64c:	88 1f       	adc	r24, r24
 64e:	bb 1f       	adc	r27, r27
 650:	62 17       	cp	r22, r18
 652:	73 07       	cpc	r23, r19
 654:	84 07       	cpc	r24, r20
 656:	ba 07       	cpc	r27, r26
 658:	20 f0       	brcs	.+8      	; 0x662 <__divsf3_pse+0xae>
 65a:	62 1b       	sub	r22, r18
 65c:	73 0b       	sbc	r23, r19
 65e:	84 0b       	sbc	r24, r20
 660:	ba 0b       	sbc	r27, r26
 662:	ee 1f       	adc	r30, r30
 664:	88 f7       	brcc	.-30     	; 0x648 <__divsf3_pse+0x94>
 666:	e0 95       	com	r30
 668:	08 95       	ret

0000066a <__fixunssfsi>:
 66a:	0e 94 94 03 	call	0x728	; 0x728 <__fp_splitA>
 66e:	88 f0       	brcs	.+34     	; 0x692 <__fixunssfsi+0x28>
 670:	9f 57       	subi	r25, 0x7F	; 127
 672:	98 f0       	brcs	.+38     	; 0x69a <__fixunssfsi+0x30>
 674:	b9 2f       	mov	r27, r25
 676:	99 27       	eor	r25, r25
 678:	b7 51       	subi	r27, 0x17	; 23
 67a:	b0 f0       	brcs	.+44     	; 0x6a8 <__fixunssfsi+0x3e>
 67c:	e1 f0       	breq	.+56     	; 0x6b6 <__fixunssfsi+0x4c>
 67e:	66 0f       	add	r22, r22
 680:	77 1f       	adc	r23, r23
 682:	88 1f       	adc	r24, r24
 684:	99 1f       	adc	r25, r25
 686:	1a f0       	brmi	.+6      	; 0x68e <__fixunssfsi+0x24>
 688:	ba 95       	dec	r27
 68a:	c9 f7       	brne	.-14     	; 0x67e <__fixunssfsi+0x14>
 68c:	14 c0       	rjmp	.+40     	; 0x6b6 <__fixunssfsi+0x4c>
 68e:	b1 30       	cpi	r27, 0x01	; 1
 690:	91 f0       	breq	.+36     	; 0x6b6 <__fixunssfsi+0x4c>
 692:	0e 94 ae 03 	call	0x75c	; 0x75c <__fp_zero>
 696:	b1 e0       	ldi	r27, 0x01	; 1
 698:	08 95       	ret
 69a:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__fp_zero>
 69e:	67 2f       	mov	r22, r23
 6a0:	78 2f       	mov	r23, r24
 6a2:	88 27       	eor	r24, r24
 6a4:	b8 5f       	subi	r27, 0xF8	; 248
 6a6:	39 f0       	breq	.+14     	; 0x6b6 <__fixunssfsi+0x4c>
 6a8:	b9 3f       	cpi	r27, 0xF9	; 249
 6aa:	cc f3       	brlt	.-14     	; 0x69e <__fixunssfsi+0x34>
 6ac:	86 95       	lsr	r24
 6ae:	77 95       	ror	r23
 6b0:	67 95       	ror	r22
 6b2:	b3 95       	inc	r27
 6b4:	d9 f7       	brne	.-10     	; 0x6ac <__fixunssfsi+0x42>
 6b6:	3e f4       	brtc	.+14     	; 0x6c6 <__fixunssfsi+0x5c>
 6b8:	90 95       	com	r25
 6ba:	80 95       	com	r24
 6bc:	70 95       	com	r23
 6be:	61 95       	neg	r22
 6c0:	7f 4f       	sbci	r23, 0xFF	; 255
 6c2:	8f 4f       	sbci	r24, 0xFF	; 255
 6c4:	9f 4f       	sbci	r25, 0xFF	; 255
 6c6:	08 95       	ret

000006c8 <__fp_inf>:
 6c8:	97 f9       	bld	r25, 7
 6ca:	9f 67       	ori	r25, 0x7F	; 127
 6cc:	80 e8       	ldi	r24, 0x80	; 128
 6ce:	70 e0       	ldi	r23, 0x00	; 0
 6d0:	60 e0       	ldi	r22, 0x00	; 0
 6d2:	08 95       	ret

000006d4 <__fp_nan>:
 6d4:	9f ef       	ldi	r25, 0xFF	; 255
 6d6:	80 ec       	ldi	r24, 0xC0	; 192
 6d8:	08 95       	ret

000006da <__fp_pscA>:
 6da:	00 24       	eor	r0, r0
 6dc:	0a 94       	dec	r0
 6de:	16 16       	cp	r1, r22
 6e0:	17 06       	cpc	r1, r23
 6e2:	18 06       	cpc	r1, r24
 6e4:	09 06       	cpc	r0, r25
 6e6:	08 95       	ret

000006e8 <__fp_pscB>:
 6e8:	00 24       	eor	r0, r0
 6ea:	0a 94       	dec	r0
 6ec:	12 16       	cp	r1, r18
 6ee:	13 06       	cpc	r1, r19
 6f0:	14 06       	cpc	r1, r20
 6f2:	05 06       	cpc	r0, r21
 6f4:	08 95       	ret

000006f6 <__fp_round>:
 6f6:	09 2e       	mov	r0, r25
 6f8:	03 94       	inc	r0
 6fa:	00 0c       	add	r0, r0
 6fc:	11 f4       	brne	.+4      	; 0x702 <__fp_round+0xc>
 6fe:	88 23       	and	r24, r24
 700:	52 f0       	brmi	.+20     	; 0x716 <__fp_round+0x20>
 702:	bb 0f       	add	r27, r27
 704:	40 f4       	brcc	.+16     	; 0x716 <__fp_round+0x20>
 706:	bf 2b       	or	r27, r31
 708:	11 f4       	brne	.+4      	; 0x70e <__fp_round+0x18>
 70a:	60 ff       	sbrs	r22, 0
 70c:	04 c0       	rjmp	.+8      	; 0x716 <__fp_round+0x20>
 70e:	6f 5f       	subi	r22, 0xFF	; 255
 710:	7f 4f       	sbci	r23, 0xFF	; 255
 712:	8f 4f       	sbci	r24, 0xFF	; 255
 714:	9f 4f       	sbci	r25, 0xFF	; 255
 716:	08 95       	ret

00000718 <__fp_split3>:
 718:	57 fd       	sbrc	r21, 7
 71a:	90 58       	subi	r25, 0x80	; 128
 71c:	44 0f       	add	r20, r20
 71e:	55 1f       	adc	r21, r21
 720:	59 f0       	breq	.+22     	; 0x738 <__fp_splitA+0x10>
 722:	5f 3f       	cpi	r21, 0xFF	; 255
 724:	71 f0       	breq	.+28     	; 0x742 <__fp_splitA+0x1a>
 726:	47 95       	ror	r20

00000728 <__fp_splitA>:
 728:	88 0f       	add	r24, r24
 72a:	97 fb       	bst	r25, 7
 72c:	99 1f       	adc	r25, r25
 72e:	61 f0       	breq	.+24     	; 0x748 <__fp_splitA+0x20>
 730:	9f 3f       	cpi	r25, 0xFF	; 255
 732:	79 f0       	breq	.+30     	; 0x752 <__fp_splitA+0x2a>
 734:	87 95       	ror	r24
 736:	08 95       	ret
 738:	12 16       	cp	r1, r18
 73a:	13 06       	cpc	r1, r19
 73c:	14 06       	cpc	r1, r20
 73e:	55 1f       	adc	r21, r21
 740:	f2 cf       	rjmp	.-28     	; 0x726 <__fp_split3+0xe>
 742:	46 95       	lsr	r20
 744:	f1 df       	rcall	.-30     	; 0x728 <__fp_splitA>
 746:	08 c0       	rjmp	.+16     	; 0x758 <__fp_splitA+0x30>
 748:	16 16       	cp	r1, r22
 74a:	17 06       	cpc	r1, r23
 74c:	18 06       	cpc	r1, r24
 74e:	99 1f       	adc	r25, r25
 750:	f1 cf       	rjmp	.-30     	; 0x734 <__fp_splitA+0xc>
 752:	86 95       	lsr	r24
 754:	71 05       	cpc	r23, r1
 756:	61 05       	cpc	r22, r1
 758:	08 94       	sec
 75a:	08 95       	ret

0000075c <__fp_zero>:
 75c:	e8 94       	clt

0000075e <__fp_szero>:
 75e:	bb 27       	eor	r27, r27
 760:	66 27       	eor	r22, r22
 762:	77 27       	eor	r23, r23
 764:	cb 01       	movw	r24, r22
 766:	97 f9       	bld	r25, 7
 768:	08 95       	ret

0000076a <__mulsf3>:
 76a:	0e 94 c8 03 	call	0x790	; 0x790 <__mulsf3x>
 76e:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__fp_round>
 772:	0e 94 6d 03 	call	0x6da	; 0x6da <__fp_pscA>
 776:	38 f0       	brcs	.+14     	; 0x786 <__mulsf3+0x1c>
 778:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__fp_pscB>
 77c:	20 f0       	brcs	.+8      	; 0x786 <__mulsf3+0x1c>
 77e:	95 23       	and	r25, r21
 780:	11 f0       	breq	.+4      	; 0x786 <__mulsf3+0x1c>
 782:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__fp_inf>
 786:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__fp_nan>
 78a:	11 24       	eor	r1, r1
 78c:	0c 94 af 03 	jmp	0x75e	; 0x75e <__fp_szero>

00000790 <__mulsf3x>:
 790:	0e 94 8c 03 	call	0x718	; 0x718 <__fp_split3>
 794:	70 f3       	brcs	.-36     	; 0x772 <__mulsf3+0x8>

00000796 <__mulsf3_pse>:
 796:	95 9f       	mul	r25, r21
 798:	c1 f3       	breq	.-16     	; 0x78a <__mulsf3+0x20>
 79a:	95 0f       	add	r25, r21
 79c:	50 e0       	ldi	r21, 0x00	; 0
 79e:	55 1f       	adc	r21, r21
 7a0:	62 9f       	mul	r22, r18
 7a2:	f0 01       	movw	r30, r0
 7a4:	72 9f       	mul	r23, r18
 7a6:	bb 27       	eor	r27, r27
 7a8:	f0 0d       	add	r31, r0
 7aa:	b1 1d       	adc	r27, r1
 7ac:	63 9f       	mul	r22, r19
 7ae:	aa 27       	eor	r26, r26
 7b0:	f0 0d       	add	r31, r0
 7b2:	b1 1d       	adc	r27, r1
 7b4:	aa 1f       	adc	r26, r26
 7b6:	64 9f       	mul	r22, r20
 7b8:	66 27       	eor	r22, r22
 7ba:	b0 0d       	add	r27, r0
 7bc:	a1 1d       	adc	r26, r1
 7be:	66 1f       	adc	r22, r22
 7c0:	82 9f       	mul	r24, r18
 7c2:	22 27       	eor	r18, r18
 7c4:	b0 0d       	add	r27, r0
 7c6:	a1 1d       	adc	r26, r1
 7c8:	62 1f       	adc	r22, r18
 7ca:	73 9f       	mul	r23, r19
 7cc:	b0 0d       	add	r27, r0
 7ce:	a1 1d       	adc	r26, r1
 7d0:	62 1f       	adc	r22, r18
 7d2:	83 9f       	mul	r24, r19
 7d4:	a0 0d       	add	r26, r0
 7d6:	61 1d       	adc	r22, r1
 7d8:	22 1f       	adc	r18, r18
 7da:	74 9f       	mul	r23, r20
 7dc:	33 27       	eor	r19, r19
 7de:	a0 0d       	add	r26, r0
 7e0:	61 1d       	adc	r22, r1
 7e2:	23 1f       	adc	r18, r19
 7e4:	84 9f       	mul	r24, r20
 7e6:	60 0d       	add	r22, r0
 7e8:	21 1d       	adc	r18, r1
 7ea:	82 2f       	mov	r24, r18
 7ec:	76 2f       	mov	r23, r22
 7ee:	6a 2f       	mov	r22, r26
 7f0:	11 24       	eor	r1, r1
 7f2:	9f 57       	subi	r25, 0x7F	; 127
 7f4:	50 40       	sbci	r21, 0x00	; 0
 7f6:	9a f0       	brmi	.+38     	; 0x81e <__mulsf3_pse+0x88>
 7f8:	f1 f0       	breq	.+60     	; 0x836 <__mulsf3_pse+0xa0>
 7fa:	88 23       	and	r24, r24
 7fc:	4a f0       	brmi	.+18     	; 0x810 <__mulsf3_pse+0x7a>
 7fe:	ee 0f       	add	r30, r30
 800:	ff 1f       	adc	r31, r31
 802:	bb 1f       	adc	r27, r27
 804:	66 1f       	adc	r22, r22
 806:	77 1f       	adc	r23, r23
 808:	88 1f       	adc	r24, r24
 80a:	91 50       	subi	r25, 0x01	; 1
 80c:	50 40       	sbci	r21, 0x00	; 0
 80e:	a9 f7       	brne	.-22     	; 0x7fa <__mulsf3_pse+0x64>
 810:	9e 3f       	cpi	r25, 0xFE	; 254
 812:	51 05       	cpc	r21, r1
 814:	80 f0       	brcs	.+32     	; 0x836 <__mulsf3_pse+0xa0>
 816:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__fp_inf>
 81a:	0c 94 af 03 	jmp	0x75e	; 0x75e <__fp_szero>
 81e:	5f 3f       	cpi	r21, 0xFF	; 255
 820:	e4 f3       	brlt	.-8      	; 0x81a <__mulsf3_pse+0x84>
 822:	98 3e       	cpi	r25, 0xE8	; 232
 824:	d4 f3       	brlt	.-12     	; 0x81a <__mulsf3_pse+0x84>
 826:	86 95       	lsr	r24
 828:	77 95       	ror	r23
 82a:	67 95       	ror	r22
 82c:	b7 95       	ror	r27
 82e:	f7 95       	ror	r31
 830:	e7 95       	ror	r30
 832:	9f 5f       	subi	r25, 0xFF	; 255
 834:	c1 f7       	brne	.-16     	; 0x826 <__mulsf3_pse+0x90>
 836:	fe 2b       	or	r31, r30
 838:	88 0f       	add	r24, r24
 83a:	91 1d       	adc	r25, r1
 83c:	96 95       	lsr	r25
 83e:	87 95       	ror	r24
 840:	97 f9       	bld	r25, 7
 842:	08 95       	ret

00000844 <__divmodhi4>:
 844:	97 fb       	bst	r25, 7
 846:	07 2e       	mov	r0, r23
 848:	16 f4       	brtc	.+4      	; 0x84e <__divmodhi4+0xa>
 84a:	00 94       	com	r0
 84c:	07 d0       	rcall	.+14     	; 0x85c <__divmodhi4_neg1>
 84e:	77 fd       	sbrc	r23, 7
 850:	09 d0       	rcall	.+18     	; 0x864 <__divmodhi4_neg2>
 852:	0e 94 36 04 	call	0x86c	; 0x86c <__udivmodhi4>
 856:	07 fc       	sbrc	r0, 7
 858:	05 d0       	rcall	.+10     	; 0x864 <__divmodhi4_neg2>
 85a:	3e f4       	brtc	.+14     	; 0x86a <__divmodhi4_exit>

0000085c <__divmodhi4_neg1>:
 85c:	90 95       	com	r25
 85e:	81 95       	neg	r24
 860:	9f 4f       	sbci	r25, 0xFF	; 255
 862:	08 95       	ret

00000864 <__divmodhi4_neg2>:
 864:	70 95       	com	r23
 866:	61 95       	neg	r22
 868:	7f 4f       	sbci	r23, 0xFF	; 255

0000086a <__divmodhi4_exit>:
 86a:	08 95       	ret

0000086c <__udivmodhi4>:
 86c:	aa 1b       	sub	r26, r26
 86e:	bb 1b       	sub	r27, r27
 870:	51 e1       	ldi	r21, 0x11	; 17
 872:	07 c0       	rjmp	.+14     	; 0x882 <__udivmodhi4_ep>

00000874 <__udivmodhi4_loop>:
 874:	aa 1f       	adc	r26, r26
 876:	bb 1f       	adc	r27, r27
 878:	a6 17       	cp	r26, r22
 87a:	b7 07       	cpc	r27, r23
 87c:	10 f0       	brcs	.+4      	; 0x882 <__udivmodhi4_ep>
 87e:	a6 1b       	sub	r26, r22
 880:	b7 0b       	sbc	r27, r23

00000882 <__udivmodhi4_ep>:
 882:	88 1f       	adc	r24, r24
 884:	99 1f       	adc	r25, r25
 886:	5a 95       	dec	r21
 888:	a9 f7       	brne	.-22     	; 0x874 <__udivmodhi4_loop>
 88a:	80 95       	com	r24
 88c:	90 95       	com	r25
 88e:	bc 01       	movw	r22, r24
 890:	cd 01       	movw	r24, r26
 892:	08 95       	ret

00000894 <_exit>:
 894:	f8 94       	cli

00000896 <__stop_program>:
 896:	ff cf       	rjmp	.-2      	; 0x896 <__stop_program>
