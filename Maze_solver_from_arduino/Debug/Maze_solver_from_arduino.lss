
Maze_solver_from_arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000eb4  00000f48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000eb4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800112  00800112  00000f5a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f5a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001139  00000000  00000000  0000107c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082d  00000000  00000000  000021b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b84  00000000  00000000  000029e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000258  00000000  00000000  00003568  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e4  00000000  00000000  000037c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000de0  00000000  00000000  00003ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004a84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 20 01 	jmp	0x240	; 0x240 <__vector_13>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__vector_21>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	a4 04       	cpc	r10, r4
  6a:	47 05       	cpc	r20, r7
  6c:	55 05       	cpc	r21, r5
  6e:	63 05       	cpc	r22, r3
  70:	71 05       	cpc	r23, r1
  72:	7f 05       	cpc	r23, r15
  74:	82 05       	cpc	r24, r2
  76:	90 05       	cpc	r25, r0
  78:	9e 05       	cpc	r25, r14

0000007a <__ctors_end>:
  7a:	11 24       	eor	r1, r1
  7c:	1f be       	out	0x3f, r1	; 63
  7e:	cf ef       	ldi	r28, 0xFF	; 255
  80:	d8 e0       	ldi	r29, 0x08	; 8
  82:	de bf       	out	0x3e, r29	; 62
  84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
  86:	11 e0       	ldi	r17, 0x01	; 1
  88:	a0 e0       	ldi	r26, 0x00	; 0
  8a:	b1 e0       	ldi	r27, 0x01	; 1
  8c:	e4 eb       	ldi	r30, 0xB4	; 180
  8e:	fe e0       	ldi	r31, 0x0E	; 14
  90:	02 c0       	rjmp	.+4      	; 0x96 <__do_copy_data+0x10>
  92:	05 90       	lpm	r0, Z+
  94:	0d 92       	st	X+, r0
  96:	a2 31       	cpi	r26, 0x12	; 18
  98:	b1 07       	cpc	r27, r17
  9a:	d9 f7       	brne	.-10     	; 0x92 <__do_copy_data+0xc>

0000009c <__do_clear_bss>:
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	a2 e1       	ldi	r26, 0x12	; 18
  a0:	b1 e0       	ldi	r27, 0x01	; 1
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	a7 32       	cpi	r26, 0x27	; 39
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
  ac:	0e 94 83 04 	call	0x906	; 0x906 <main>
  b0:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <setupADC>:


// ponizsze funkcje dokonuja pomiaru i uzywa przetwornika na 5 kanalach
void setupADC()
{
	ADCSRA |= (1 << ADPS2);
  b8:	ea e7       	ldi	r30, 0x7A	; 122
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	84 60       	ori	r24, 0x04	; 4
  c0:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0); 
  c2:	ac e7       	ldi	r26, 0x7C	; 124
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	8c 91       	ld	r24, X
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);
  cc:	80 81       	ld	r24, Z
  ce:	88 60       	ori	r24, 0x08	; 8
  d0:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);
  d2:	80 81       	ld	r24, Z
  d4:	80 68       	ori	r24, 0x80	; 128
  d6:	80 83       	st	Z, r24
	sei();
  d8:	78 94       	sei
	ADCSRA |= (1 << ADSC);
  da:	80 81       	ld	r24, Z
  dc:	80 64       	ori	r24, 0x40	; 64
  de:	80 83       	st	Z, r24
  e0:	08 95       	ret

000000e2 <__vector_21>:
	
}
ISR(ADC_vect)
{
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	2f 93       	push	r18
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
  f2:	ef 93       	push	r30
  f4:	ff 93       	push	r31
	uint8_t theLOW = ADCL;
  f6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	uint16_t theTenBitResult = ADCH << 8 | theLOW ;   //shifting because we need space for first 8 bits from ADCL
  fa:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	92 2b       	or	r25, r18
	//theTenBitResult = theTenBitResult /10 ;
	
	
	//we need to determinate nest channel to make conversion
	switch (ADMUX)
 102:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 106:	23 34       	cpi	r18, 0x43	; 67
 108:	d9 f0       	breq	.+54     	; 0x140 <__vector_21+0x5e>
 10a:	28 f4       	brcc	.+10     	; 0x116 <__vector_21+0x34>
 10c:	20 34       	cpi	r18, 0x40	; 64
 10e:	41 f0       	breq	.+16     	; 0x120 <__vector_21+0x3e>
 110:	21 34       	cpi	r18, 0x41	; 65
 112:	71 f0       	breq	.+28     	; 0x130 <__vector_21+0x4e>
 114:	2c c0       	rjmp	.+88     	; 0x16e <__vector_21+0x8c>
 116:	24 34       	cpi	r18, 0x44	; 68
 118:	d9 f0       	breq	.+54     	; 0x150 <__vector_21+0x6e>
 11a:	25 34       	cpi	r18, 0x45	; 69
 11c:	09 f1       	breq	.+66     	; 0x160 <__vector_21+0x7e>
 11e:	27 c0       	rjmp	.+78     	; 0x16e <__vector_21+0x8c>
	{
		case 0x40:
			pomiary[4] = theTenBitResult;
 120:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <pomiary+0x9>
 124:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <pomiary+0x8>
			ADMUX = 0x41;
 128:	81 e4       	ldi	r24, 0x41	; 65
 12a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
			break;
 12e:	1f c0       	rjmp	.+62     	; 0x16e <__vector_21+0x8c>
		case 0x41:
			pomiary[3] = theTenBitResult;
 130:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <pomiary+0x7>
 134:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <pomiary+0x6>
			ADMUX = 0x43;
 138:	83 e4       	ldi	r24, 0x43	; 67
 13a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
			break;
 13e:	17 c0       	rjmp	.+46     	; 0x16e <__vector_21+0x8c>
		case 0x43:
			pomiary[1] = theTenBitResult;
 140:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <pomiary+0x3>
 144:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <pomiary+0x2>
			ADMUX = 0x44;
 148:	84 e4       	ldi	r24, 0x44	; 68
 14a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
			break;
 14e:	0f c0       	rjmp	.+30     	; 0x16e <__vector_21+0x8c>
		case 0x44:
			pomiary[0] = theTenBitResult;
 150:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <pomiary+0x1>
 154:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <pomiary>
			ADMUX = 0x45;
 158:	85 e4       	ldi	r24, 0x45	; 69
 15a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
			break;
 15e:	07 c0       	rjmp	.+14     	; 0x16e <__vector_21+0x8c>
		case 0x45:
			pomiary[2] = theTenBitResult;
 160:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <pomiary+0x5>
 164:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <pomiary+0x4>
			ADMUX = 0x40;
 168:	80 e4       	ldi	r24, 0x40	; 64
 16a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		default:
			break;
												
	}
	
	ADCSRA |= (1 << ADSC);
 16e:	ea e7       	ldi	r30, 0x7A	; 122
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	80 64       	ori	r24, 0x40	; 64
 176:	80 83       	st	Z, r24
	
	if (ADMUX == 45)
 178:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 17c:	8d 32       	cpi	r24, 0x2D	; 45
 17e:	11 f4       	brne	.+4      	; 0x184 <__vector_21+0xa2>
	{
		ADCSRA |= (0 << ADSC);
 180:	80 81       	ld	r24, Z
 182:	80 83       	st	Z, r24
	}
}
 184:	ff 91       	pop	r31
 186:	ef 91       	pop	r30
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	2f 91       	pop	r18
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <setupPWM>:


// potrzebene do PWM, troche prob i bledow troche filmiki troche datasheet
void setupPWM()
{
	DDRB |= (1 << DDB1)|(1 << DDB2);	// PB1 and PB2 is now an output
 198:	84 b1       	in	r24, 0x04	; 4
 19a:	86 60       	ori	r24, 0x06	; 6
 19c:	84 b9       	out	0x04, r24	; 4
	ICR1 = 0xFFFF;	// set TOP to 16bit
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	9f ef       	ldi	r25, 0xFF	; 255
 1a2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 1a6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR1A = (dutyCycleA/100)*65535; // set PWM for duty cycle @ 16bit
 1aa:	20 e0       	ldi	r18, 0x00	; 0
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	48 ec       	ldi	r20, 0xC8	; 200
 1b0:	52 e4       	ldi	r21, 0x42	; 66
 1b2:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <dutyCycleA>
 1b6:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <dutyCycleA+0x1>
 1ba:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dutyCycleA+0x2>
 1be:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dutyCycleA+0x3>
 1c2:	0e 94 cb 05 	call	0xb96	; 0xb96 <__divsf3>
 1c6:	20 e0       	ldi	r18, 0x00	; 0
 1c8:	3f ef       	ldi	r19, 0xFF	; 255
 1ca:	4f e7       	ldi	r20, 0x7F	; 127
 1cc:	57 e4       	ldi	r21, 0x47	; 71
 1ce:	0e 94 bd 06 	call	0xd7a	; 0xd7a <__mulsf3>
 1d2:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__fixunssfsi>
 1d6:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1da:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = (dutyCycleB/100)*65535;
 1de:	20 e0       	ldi	r18, 0x00	; 0
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	48 ec       	ldi	r20, 0xC8	; 200
 1e4:	52 e4       	ldi	r21, 0x42	; 66
 1e6:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 1ea:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 1ee:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 1f2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 1f6:	0e 94 cb 05 	call	0xb96	; 0xb96 <__divsf3>
 1fa:	20 e0       	ldi	r18, 0x00	; 0
 1fc:	3f ef       	ldi	r19, 0xFF	; 255
 1fe:	4f e7       	ldi	r20, 0x7F	; 127
 200:	57 e4       	ldi	r21, 0x47	; 71
 202:	0e 94 bd 06 	call	0xd7a	; 0xd7a <__mulsf3>
 206:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__fixunssfsi>
 20a:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 20e:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	sei();
 212:	78 94       	sei
	TCCR1A |= (1 << COM1A1)|(1 << COM1B1);	// set none-inverting mode
 214:	e0 e8       	ldi	r30, 0x80	; 128
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	80 6a       	ori	r24, 0xA0	; 160
 21c:	80 83       	st	Z, r24
	TCCR1A |= (1 << WGM11);
 21e:	80 81       	ld	r24, Z
 220:	82 60       	ori	r24, 0x02	; 2
 222:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12)|(1 << WGM13);	// set Fast PWM mode using ICR1 as TOP
 224:	e1 e8       	ldi	r30, 0x81	; 129
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	88 61       	ori	r24, 0x18	; 24
 22c:	80 83       	st	Z, r24
	TIMSK1 |= (1 << TOIE1);					// its for interrupt
 22e:	af e6       	ldi	r26, 0x6F	; 111
 230:	b0 e0       	ldi	r27, 0x00	; 0
 232:	8c 91       	ld	r24, X
 234:	81 60       	ori	r24, 0x01	; 1
 236:	8c 93       	st	X, r24
	TCCR1B |= (1 << CS10);	// START the timer with no prescaler
 238:	80 81       	ld	r24, Z
 23a:	81 60       	ori	r24, 0x01	; 1
 23c:	80 83       	st	Z, r24
 23e:	08 95       	ret

00000240 <__vector_13>:
}
ISR(TIMER1_OVF_vect)
{
 240:	1f 92       	push	r1
 242:	0f 92       	push	r0
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	0f 92       	push	r0
 248:	11 24       	eor	r1, r1
 24a:	2f 93       	push	r18
 24c:	3f 93       	push	r19
 24e:	4f 93       	push	r20
 250:	5f 93       	push	r21
 252:	6f 93       	push	r22
 254:	7f 93       	push	r23
 256:	8f 93       	push	r24
 258:	9f 93       	push	r25
 25a:	af 93       	push	r26
 25c:	bf 93       	push	r27
 25e:	ef 93       	push	r30
 260:	ff 93       	push	r31
	OCR1A = (dutyCycleA/255)*65535;
 262:	20 e0       	ldi	r18, 0x00	; 0
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	4f e7       	ldi	r20, 0x7F	; 127
 268:	53 e4       	ldi	r21, 0x43	; 67
 26a:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <dutyCycleA>
 26e:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <dutyCycleA+0x1>
 272:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <dutyCycleA+0x2>
 276:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <dutyCycleA+0x3>
 27a:	0e 94 cb 05 	call	0xb96	; 0xb96 <__divsf3>
 27e:	20 e0       	ldi	r18, 0x00	; 0
 280:	3f ef       	ldi	r19, 0xFF	; 255
 282:	4f e7       	ldi	r20, 0x7F	; 127
 284:	57 e4       	ldi	r21, 0x47	; 71
 286:	0e 94 bd 06 	call	0xd7a	; 0xd7a <__mulsf3>
 28a:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__fixunssfsi>
 28e:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 292:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = (dutyCycleB/255)*65535;
 296:	20 e0       	ldi	r18, 0x00	; 0
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	4f e7       	ldi	r20, 0x7F	; 127
 29c:	53 e4       	ldi	r21, 0x43	; 67
 29e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 2a2:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 2a6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 2aa:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 2ae:	0e 94 cb 05 	call	0xb96	; 0xb96 <__divsf3>
 2b2:	20 e0       	ldi	r18, 0x00	; 0
 2b4:	3f ef       	ldi	r19, 0xFF	; 255
 2b6:	4f e7       	ldi	r20, 0x7F	; 127
 2b8:	57 e4       	ldi	r21, 0x47	; 71
 2ba:	0e 94 bd 06 	call	0xd7a	; 0xd7a <__mulsf3>
 2be:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__fixunssfsi>
 2c2:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 2c6:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
}
 2ca:	ff 91       	pop	r31
 2cc:	ef 91       	pop	r30
 2ce:	bf 91       	pop	r27
 2d0:	af 91       	pop	r26
 2d2:	9f 91       	pop	r25
 2d4:	8f 91       	pop	r24
 2d6:	7f 91       	pop	r23
 2d8:	6f 91       	pop	r22
 2da:	5f 91       	pop	r21
 2dc:	4f 91       	pop	r20
 2de:	3f 91       	pop	r19
 2e0:	2f 91       	pop	r18
 2e2:	0f 90       	pop	r0
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	0f 90       	pop	r0
 2e8:	1f 90       	pop	r1
 2ea:	18 95       	reti

000002ec <pomiar>:



void pomiar()
{
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
	setupADC();
 2f0:	0e 94 5c 00 	call	0xb8	; 0xb8 <setupADC>
 2f4:	ed e1       	ldi	r30, 0x1D	; 29
 2f6:	f1 e0       	ldi	r31, 0x01	; 1
 2f8:	c8 e0       	ldi	r28, 0x08	; 8
 2fa:	d1 e0       	ldi	r29, 0x01	; 1
 2fc:	a3 e1       	ldi	r26, 0x13	; 19
 2fe:	b1 e0       	ldi	r27, 0x01	; 1
 300:	47 e2       	ldi	r20, 0x27	; 39
 302:	51 e0       	ldi	r21, 0x01	; 1
	for (int i = 0; i < 5; ++i)
	{
		if (pomiary[i] > zkalibrowane[i])
		{
			pomiary_[i] = 1;
 304:	61 e0       	ldi	r22, 0x01	; 1
 306:	70 e0       	ldi	r23, 0x00	; 0
void pomiar()
{
	setupADC();
	for (int i = 0; i < 5; ++i)
	{
		if (pomiary[i] > zkalibrowane[i])
 308:	21 91       	ld	r18, Z+
 30a:	31 91       	ld	r19, Z+
 30c:	89 91       	ld	r24, Y+
 30e:	99 91       	ld	r25, Y+
 310:	82 17       	cp	r24, r18
 312:	93 07       	cpc	r25, r19
 314:	24 f4       	brge	.+8      	; 0x31e <pomiar+0x32>
		{
			pomiary_[i] = 1;
 316:	11 96       	adiw	r26, 0x01	; 1
 318:	7c 93       	st	X, r23
 31a:	6e 93       	st	-X, r22
 31c:	03 c0       	rjmp	.+6      	; 0x324 <pomiar+0x38>
		}
		else
		{
			pomiary_[i] = 0;
 31e:	11 96       	adiw	r26, 0x01	; 1
 320:	1c 92       	st	X, r1
 322:	1e 92       	st	-X, r1
 324:	12 96       	adiw	r26, 0x02	; 2


void pomiar()
{
	setupADC();
	for (int i = 0; i < 5; ++i)
 326:	e4 17       	cp	r30, r20
 328:	f5 07       	cpc	r31, r21
 32a:	71 f7       	brne	.-36     	; 0x308 <pomiar+0x1c>
		else
		{
			pomiary_[i] = 0;
		}
	}
}
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	08 95       	ret

00000332 <kalibracja>:



void kalibracja()
 {
 332:	4f 92       	push	r4
 334:	5f 92       	push	r5
 336:	6f 92       	push	r6
 338:	7f 92       	push	r7
 33a:	8f 92       	push	r8
 33c:	9f 92       	push	r9
 33e:	af 92       	push	r10
 340:	bf 92       	push	r11
 342:	cf 92       	push	r12
 344:	df 92       	push	r13
 346:	ef 92       	push	r14
 348:	ff 92       	push	r15
 34a:	0f 93       	push	r16
 34c:	1f 93       	push	r17
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	cd b7       	in	r28, 0x3d	; 61
 354:	de b7       	in	r29, 0x3e	; 62
 356:	c4 56       	subi	r28, 0x64	; 100
 358:	d1 09       	sbc	r29, r1
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	f8 94       	cli
 35e:	de bf       	out	0x3e, r29	; 62
 360:	0f be       	out	0x3f, r0	; 63
 362:	cd bf       	out	0x3d, r28	; 61
	int roznica = 135;                //zmien jesli chcesz zeby łapał jedynke przy wiekszej zmianie
	int pomiary_kalibracja[10][5];   //tablica na potrzebne pomiary


	//petla z takimi warunnkami zeby mi nie wyszla głupota [case np jak stoi jednym czujnikiem przypadkiem na lini zamiast na podłozu]
	while(zkalibrowane[0] > 600 || zkalibrowane[1] > 600 || zkalibrowane[2] > 600 || zkalibrowane[3] > 600 || zkalibrowane[4] > 600)
 364:	0f 2e       	mov	r0, r31
 366:	f8 e0       	ldi	r31, 0x08	; 8
 368:	6f 2e       	mov	r6, r31
 36a:	f1 e0       	ldi	r31, 0x01	; 1
 36c:	7f 2e       	mov	r7, r31
 36e:	f0 2d       	mov	r31, r0
 370:	6e 01       	movw	r12, r28
 372:	25 e6       	ldi	r18, 0x65	; 101
 374:	c2 0e       	add	r12, r18
 376:	d1 1c       	adc	r13, r1
	{             
		
		for (int i = 0 ; i<10 ; i++)
		{
			setupADC();
			pomiary_kalibracja[i][0] = pomiary[0];
 378:	0f 2e       	mov	r0, r31
 37a:	fd e1       	ldi	r31, 0x1D	; 29
 37c:	ef 2e       	mov	r14, r31
 37e:	f1 e0       	ldi	r31, 0x01	; 1
 380:	ff 2e       	mov	r15, r31
 382:	f0 2d       	mov	r31, r0
			suma[3] = pomiary_kalibracja[i][3] + suma[3];
			suma[4] = pomiary_kalibracja[i][4] + suma[4];
		}

		// nie jest w petli zeby miec dostep do poszczegolnych i je sobie modyfikowac w miare potrzeby
		zkalibrowane[0] = suma[0] / 10 + roznica;
 384:	0f 2e       	mov	r0, r31
 386:	fa e0       	ldi	r31, 0x0A	; 10
 388:	4f 2e       	mov	r4, r31
 38a:	51 2c       	mov	r5, r1
 38c:	f0 2d       	mov	r31, r0
	int roznica = 135;                //zmien jesli chcesz zeby łapał jedynke przy wiekszej zmianie
	int pomiary_kalibracja[10][5];   //tablica na potrzebne pomiary


	//petla z takimi warunnkami zeby mi nie wyszla głupota [case np jak stoi jednym czujnikiem przypadkiem na lini zamiast na podłozu]
	while(zkalibrowane[0] > 600 || zkalibrowane[1] > 600 || zkalibrowane[2] > 600 || zkalibrowane[3] > 600 || zkalibrowane[4] > 600)
 38e:	8c c0       	rjmp	.+280    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
	{             
		
		for (int i = 0 ; i<10 ; i++)
		{
			setupADC();
 390:	0e 94 5c 00 	call	0xb8	; 0xb8 <setupADC>
			pomiary_kalibracja[i][0] = pomiary[0];
 394:	d7 01       	movw	r26, r14
 396:	8d 91       	ld	r24, X+
 398:	9c 91       	ld	r25, X
 39a:	11 97       	sbiw	r26, 0x01	; 1
 39c:	f5 01       	movw	r30, r10
 39e:	91 83       	std	Z+1, r25	; 0x01
 3a0:	80 83       	st	Z, r24
			pomiary_kalibracja[i][1] = pomiary[1];
 3a2:	12 96       	adiw	r26, 0x02	; 2
 3a4:	8d 91       	ld	r24, X+
 3a6:	9c 91       	ld	r25, X
 3a8:	13 97       	sbiw	r26, 0x03	; 3
 3aa:	93 83       	std	Z+3, r25	; 0x03
 3ac:	82 83       	std	Z+2, r24	; 0x02
			pomiary_kalibracja[i][2] = pomiary[2];
 3ae:	14 96       	adiw	r26, 0x04	; 4
 3b0:	8d 91       	ld	r24, X+
 3b2:	9c 91       	ld	r25, X
 3b4:	15 97       	sbiw	r26, 0x05	; 5
 3b6:	95 83       	std	Z+5, r25	; 0x05
 3b8:	84 83       	std	Z+4, r24	; 0x04
			pomiary_kalibracja[i][3] = pomiary[3];
 3ba:	16 96       	adiw	r26, 0x06	; 6
 3bc:	8d 91       	ld	r24, X+
 3be:	9c 91       	ld	r25, X
 3c0:	17 97       	sbiw	r26, 0x07	; 7
 3c2:	97 83       	std	Z+7, r25	; 0x07
 3c4:	86 83       	std	Z+6, r24	; 0x06
			pomiary_kalibracja[i][4] = pomiary[4];
 3c6:	18 96       	adiw	r26, 0x08	; 8
 3c8:	8d 91       	ld	r24, X+
 3ca:	9c 91       	ld	r25, X
 3cc:	19 97       	sbiw	r26, 0x09	; 9
 3ce:	91 87       	std	Z+9, r25	; 0x09
 3d0:	80 87       	std	Z+8, r24	; 0x08
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d2:	ff ef       	ldi	r31, 0xFF	; 255
 3d4:	20 e7       	ldi	r18, 0x70	; 112
 3d6:	82 e0       	ldi	r24, 0x02	; 2
 3d8:	f1 50       	subi	r31, 0x01	; 1
 3da:	20 40       	sbci	r18, 0x00	; 0
 3dc:	80 40       	sbci	r24, 0x00	; 0
 3de:	e1 f7       	brne	.-8      	; 0x3d8 <kalibracja+0xa6>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <kalibracja+0xb0>
 3e2:	00 00       	nop
 3e4:	9a e0       	ldi	r25, 0x0A	; 10
 3e6:	a9 0e       	add	r10, r25
 3e8:	b1 1c       	adc	r11, r1

	//petla z takimi warunnkami zeby mi nie wyszla głupota [case np jak stoi jednym czujnikiem przypadkiem na lini zamiast na podłozu]
	while(zkalibrowane[0] > 600 || zkalibrowane[1] > 600 || zkalibrowane[2] > 600 || zkalibrowane[3] > 600 || zkalibrowane[4] > 600)
	{             
		
		for (int i = 0 ; i<10 ; i++)
 3ea:	ca 14       	cp	r12, r10
 3ec:	db 04       	cpc	r13, r11
 3ee:	81 f6       	brne	.-96     	; 0x390 <kalibracja+0x5e>
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	81 2c       	mov	r8, r1
 3f6:	91 2c       	mov	r9, r1
 3f8:	a1 2c       	mov	r10, r1
 3fa:	b1 2c       	mov	r11, r1
 3fc:	e0 e0       	ldi	r30, 0x00	; 0
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	20 e0       	ldi	r18, 0x00	; 0
 402:	30 e0       	ldi	r19, 0x00	; 0

		int suma[5] = {0,0,0,0,0};
		
		for (int i = 0 ; i<10 ; i++)
		{
			suma[0] = pomiary_kalibracja[i][0] + suma[0];
 404:	d8 01       	movw	r26, r16
 406:	4d 91       	ld	r20, X+
 408:	5c 91       	ld	r21, X
 40a:	11 97       	sbiw	r26, 0x01	; 1
 40c:	84 0f       	add	r24, r20
 40e:	95 1f       	adc	r25, r21
			suma[1] = pomiary_kalibracja[i][1] + suma[1];
 410:	12 96       	adiw	r26, 0x02	; 2
 412:	4d 91       	ld	r20, X+
 414:	5c 91       	ld	r21, X
 416:	13 97       	sbiw	r26, 0x03	; 3
 418:	84 0e       	add	r8, r20
 41a:	95 1e       	adc	r9, r21
			suma[2] = pomiary_kalibracja[i][2] + suma[2];
 41c:	14 96       	adiw	r26, 0x04	; 4
 41e:	4d 91       	ld	r20, X+
 420:	5c 91       	ld	r21, X
 422:	15 97       	sbiw	r26, 0x05	; 5
 424:	a4 0e       	add	r10, r20
 426:	b5 1e       	adc	r11, r21
			suma[3] = pomiary_kalibracja[i][3] + suma[3];
 428:	16 96       	adiw	r26, 0x06	; 6
 42a:	4d 91       	ld	r20, X+
 42c:	5c 91       	ld	r21, X
 42e:	17 97       	sbiw	r26, 0x07	; 7
 430:	e4 0f       	add	r30, r20
 432:	f5 1f       	adc	r31, r21
			suma[4] = pomiary_kalibracja[i][4] + suma[4];
 434:	18 96       	adiw	r26, 0x08	; 8
 436:	4d 91       	ld	r20, X+
 438:	5c 91       	ld	r21, X
 43a:	19 97       	sbiw	r26, 0x09	; 9
 43c:	24 0f       	add	r18, r20
 43e:	35 1f       	adc	r19, r21
 440:	06 5f       	subi	r16, 0xF6	; 246
 442:	1f 4f       	sbci	r17, 0xFF	; 255
			_delay_ms(50);
		};

		int suma[5] = {0,0,0,0,0};
		
		for (int i = 0 ; i<10 ; i++)
 444:	0c 15       	cp	r16, r12
 446:	1d 05       	cpc	r17, r13
 448:	e9 f6       	brne	.-70     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
			suma[3] = pomiary_kalibracja[i][3] + suma[3];
			suma[4] = pomiary_kalibracja[i][4] + suma[4];
		}

		// nie jest w petli zeby miec dostep do poszczegolnych i je sobie modyfikowac w miare potrzeby
		zkalibrowane[0] = suma[0] / 10 + roznica;
 44a:	b2 01       	movw	r22, r4
 44c:	0e 94 2a 07 	call	0xe54	; 0xe54 <__divmodhi4>
 450:	69 57       	subi	r22, 0x79	; 121
 452:	7f 4f       	sbci	r23, 0xFF	; 255
 454:	d3 01       	movw	r26, r6
 456:	6d 93       	st	X+, r22
 458:	7c 93       	st	X, r23
		zkalibrowane[1] = suma[1] /10 + roznica;
 45a:	c4 01       	movw	r24, r8
 45c:	b2 01       	movw	r22, r4
 45e:	0e 94 2a 07 	call	0xe54	; 0xe54 <__divmodhi4>
 462:	69 57       	subi	r22, 0x79	; 121
 464:	7f 4f       	sbci	r23, 0xFF	; 255
 466:	d3 01       	movw	r26, r6
 468:	13 96       	adiw	r26, 0x03	; 3
 46a:	7c 93       	st	X, r23
 46c:	6e 93       	st	-X, r22
 46e:	12 97       	sbiw	r26, 0x02	; 2
		zkalibrowane[2] = suma[2] /10 + roznica - 35; //odjalem bo srodek jest kluczowy w slepych uliczkach
 470:	c5 01       	movw	r24, r10
 472:	b2 01       	movw	r22, r4
 474:	0e 94 2a 07 	call	0xe54	; 0xe54 <__divmodhi4>
 478:	6c 59       	subi	r22, 0x9C	; 156
 47a:	7f 4f       	sbci	r23, 0xFF	; 255
 47c:	d3 01       	movw	r26, r6
 47e:	15 96       	adiw	r26, 0x05	; 5
 480:	7c 93       	st	X, r23
 482:	6e 93       	st	-X, r22
 484:	14 97       	sbiw	r26, 0x04	; 4
		zkalibrowane[3] = suma[3] /10 + roznica;
 486:	cf 01       	movw	r24, r30
 488:	b2 01       	movw	r22, r4
 48a:	0e 94 2a 07 	call	0xe54	; 0xe54 <__divmodhi4>
 48e:	69 57       	subi	r22, 0x79	; 121
 490:	7f 4f       	sbci	r23, 0xFF	; 255
 492:	f3 01       	movw	r30, r6
 494:	77 83       	std	Z+7, r23	; 0x07
 496:	66 83       	std	Z+6, r22	; 0x06
		zkalibrowane[4] = suma[4] /10 + roznica;
 498:	c9 01       	movw	r24, r18
 49a:	b2 01       	movw	r22, r4
 49c:	0e 94 2a 07 	call	0xe54	; 0xe54 <__divmodhi4>
 4a0:	69 57       	subi	r22, 0x79	; 121
 4a2:	7f 4f       	sbci	r23, 0xFF	; 255
 4a4:	71 87       	std	Z+9, r23	; 0x09
 4a6:	60 87       	std	Z+8, r22	; 0x08
	int roznica = 135;                //zmien jesli chcesz zeby łapał jedynke przy wiekszej zmianie
	int pomiary_kalibracja[10][5];   //tablica na potrzebne pomiary


	//petla z takimi warunnkami zeby mi nie wyszla głupota [case np jak stoi jednym czujnikiem przypadkiem na lini zamiast na podłozu]
	while(zkalibrowane[0] > 600 || zkalibrowane[1] > 600 || zkalibrowane[2] > 600 || zkalibrowane[3] > 600 || zkalibrowane[4] > 600)
 4a8:	d3 01       	movw	r26, r6
 4aa:	8d 91       	ld	r24, X+
 4ac:	9c 91       	ld	r25, X
 4ae:	89 35       	cpi	r24, 0x59	; 89
 4b0:	92 40       	sbci	r25, 0x02	; 2
 4b2:	34 f4       	brge	.+12     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 4b4:	f3 01       	movw	r30, r6
 4b6:	82 81       	ldd	r24, Z+2	; 0x02
 4b8:	93 81       	ldd	r25, Z+3	; 0x03
 4ba:	89 35       	cpi	r24, 0x59	; 89
 4bc:	92 40       	sbci	r25, 0x02	; 2
 4be:	2c f0       	brlt	.+10     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 4c0:	8e 01       	movw	r16, r28
 4c2:	0f 5f       	subi	r16, 0xFF	; 255
 4c4:	1f 4f       	sbci	r17, 0xFF	; 255
}



void kalibracja()
 {
 4c6:	58 01       	movw	r10, r16
 4c8:	63 cf       	rjmp	.-314    	; 0x390 <kalibracja+0x5e>
	int roznica = 135;                //zmien jesli chcesz zeby łapał jedynke przy wiekszej zmianie
	int pomiary_kalibracja[10][5];   //tablica na potrzebne pomiary


	//petla z takimi warunnkami zeby mi nie wyszla głupota [case np jak stoi jednym czujnikiem przypadkiem na lini zamiast na podłozu]
	while(zkalibrowane[0] > 600 || zkalibrowane[1] > 600 || zkalibrowane[2] > 600 || zkalibrowane[3] > 600 || zkalibrowane[4] > 600)
 4ca:	d3 01       	movw	r26, r6
 4cc:	14 96       	adiw	r26, 0x04	; 4
 4ce:	8d 91       	ld	r24, X+
 4d0:	9c 91       	ld	r25, X
 4d2:	15 97       	sbiw	r26, 0x05	; 5
 4d4:	89 35       	cpi	r24, 0x59	; 89
 4d6:	92 40       	sbci	r25, 0x02	; 2
 4d8:	9c f7       	brge	.-26     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 4da:	f3 01       	movw	r30, r6
 4dc:	86 81       	ldd	r24, Z+6	; 0x06
 4de:	97 81       	ldd	r25, Z+7	; 0x07
 4e0:	89 35       	cpi	r24, 0x59	; 89
 4e2:	92 40       	sbci	r25, 0x02	; 2
 4e4:	6c f7       	brge	.-38     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 4e6:	d3 01       	movw	r26, r6
 4e8:	18 96       	adiw	r26, 0x08	; 8
 4ea:	8d 91       	ld	r24, X+
 4ec:	9c 91       	ld	r25, X
 4ee:	19 97       	sbiw	r26, 0x09	; 9
 4f0:	89 35       	cpi	r24, 0x59	; 89
 4f2:	92 40       	sbci	r25, 0x02	; 2
 4f4:	2c f7       	brge	.-54     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
		zkalibrowane[3] = suma[3] /10 + roznica;
		zkalibrowane[4] = suma[4] /10 + roznica;
		
	}

	DDRB |= (1 << DDB4);
 4f6:	24 9a       	sbi	0x04, 4	; 4
	PORTB |= (1 << PORTB4); // zapala diode sygnalizujac ze kalibracja sie udala i ruszy za 2 sek
 4f8:	2c 9a       	sbi	0x05, 4	; 5
 4fa:	ef ef       	ldi	r30, 0xFF	; 255
 4fc:	f3 e2       	ldi	r31, 0x23	; 35
 4fe:	24 ef       	ldi	r18, 0xF4	; 244
 500:	e1 50       	subi	r30, 0x01	; 1
 502:	f0 40       	sbci	r31, 0x00	; 0
 504:	20 40       	sbci	r18, 0x00	; 0
 506:	e1 f7       	brne	.-8      	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 508:	00 c0       	rjmp	.+0      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 50a:	00 00       	nop
	_delay_ms(5000);  
}
 50c:	cc 59       	subi	r28, 0x9C	; 156
 50e:	df 4f       	sbci	r29, 0xFF	; 255
 510:	0f b6       	in	r0, 0x3f	; 63
 512:	f8 94       	cli
 514:	de bf       	out	0x3e, r29	; 62
 516:	0f be       	out	0x3f, r0	; 63
 518:	cd bf       	out	0x3d, r28	; 61
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	1f 91       	pop	r17
 520:	0f 91       	pop	r16
 522:	ff 90       	pop	r15
 524:	ef 90       	pop	r14
 526:	df 90       	pop	r13
 528:	cf 90       	pop	r12
 52a:	bf 90       	pop	r11
 52c:	af 90       	pop	r10
 52e:	9f 90       	pop	r9
 530:	8f 90       	pop	r8
 532:	7f 90       	pop	r7
 534:	6f 90       	pop	r6
 536:	5f 90       	pop	r5
 538:	4f 90       	pop	r4
 53a:	08 95       	ret

0000053c <logika>:
}

// wyrzuca 0 jesli znajdzie linie do sledzenia podczas manewru, wyrzuca 1 jesli nie widzi
int logika()
{
	if((pomiary_[3] == 0) && (pomiary_[1] == 1) && (pomiary_[0] == 0) && (pomiary_[4] == 0) && (pomiary_[2] == 0 || pomiary_[2] == 1))
 53c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <pomiary_+0x6>
 540:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <pomiary_+0x7>
 544:	00 97       	sbiw	r24, 0x00	; 0
 546:	09 f0       	breq	.+2      	; 0x54a <logika+0xe>
 548:	63 c0       	rjmp	.+198    	; 0x610 <logika+0xd4>
 54a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <pomiary_+0x2>
 54e:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <pomiary_+0x3>
 552:	81 30       	cpi	r24, 0x01	; 1
 554:	91 05       	cpc	r25, r1
 556:	b9 f5       	brne	.+110    	; 0x5c6 <logika+0x8a>
 558:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <pomiary_>
 55c:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <pomiary_+0x1>
 560:	23 2b       	or	r18, r19
 562:	09 f0       	breq	.+2      	; 0x566 <logika+0x2a>
 564:	5b c0       	rjmp	.+182    	; 0x61c <logika+0xe0>
 566:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <pomiary_+0x8>
 56a:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <pomiary_+0x9>
 56e:	21 15       	cp	r18, r1
 570:	31 05       	cpc	r19, r1
 572:	09 f0       	breq	.+2      	; 0x576 <logika+0x3a>
 574:	53 c0       	rjmp	.+166    	; 0x61c <logika+0xe0>
 576:	40 91 17 01 	lds	r20, 0x0117	; 0x800117 <pomiary_+0x4>
 57a:	50 91 18 01 	lds	r21, 0x0118	; 0x800118 <pomiary_+0x5>
 57e:	42 30       	cpi	r20, 0x02	; 2
 580:	51 05       	cpc	r21, r1
 582:	08 f0       	brcs	.+2      	; 0x586 <logika+0x4a>
 584:	4b c0       	rjmp	.+150    	; 0x61c <logika+0xe0>
 586:	39 c0       	rjmp	.+114    	; 0x5fa <logika+0xbe>
	{
		return 0;
	}

	else if ((pomiary_[3] == 1) && (pomiary_[1] == 0) && (pomiary_[0] == 0) && (pomiary_[4] == 0) && (pomiary_[2] == 0 || pomiary_[2] == 1))
 588:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <pomiary_+0x2>
 58c:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <pomiary_+0x3>
 590:	23 2b       	or	r18, r19
 592:	09 f0       	breq	.+2      	; 0x596 <logika+0x5a>
 594:	43 c0       	rjmp	.+134    	; 0x61c <logika+0xe0>
 596:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <pomiary_>
 59a:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <pomiary_+0x1>
 59e:	23 2b       	or	r18, r19
 5a0:	e9 f5       	brne	.+122    	; 0x61c <logika+0xe0>
 5a2:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <pomiary_+0x8>
 5a6:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <pomiary_+0x9>
 5aa:	23 2b       	or	r18, r19
 5ac:	b9 f5       	brne	.+110    	; 0x61c <logika+0xe0>
// wyrzuca 0 jesli znajdzie linie do sledzenia podczas manewru, wyrzuca 1 jesli nie widzi
int logika()
{
	if((pomiary_[3] == 0) && (pomiary_[1] == 1) && (pomiary_[0] == 0) && (pomiary_[4] == 0) && (pomiary_[2] == 0 || pomiary_[2] == 1))
	{
		return 0;
 5ae:	31 e0       	ldi	r19, 0x01	; 1
 5b0:	20 e0       	ldi	r18, 0x00	; 0
 5b2:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <pomiary_+0x4>
 5b6:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <pomiary_+0x5>
 5ba:	02 97       	sbiw	r24, 0x02	; 2
 5bc:	08 f4       	brcc	.+2      	; 0x5c0 <logika+0x84>
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	83 2f       	mov	r24, r19
 5c2:	92 2f       	mov	r25, r18
 5c4:	08 95       	ret
	else if ((pomiary_[3] == 1) && (pomiary_[1] == 0) && (pomiary_[0] == 0) && (pomiary_[4] == 0) && (pomiary_[2] == 0 || pomiary_[2] == 1))
	{
		return 0;
	}

	else if ((pomiary_[3] == 0) && (pomiary_[1] == 0) && (pomiary_[0] == 0) && (pomiary_[4] == 0) && (pomiary_[2] == 1))
 5c6:	89 2b       	or	r24, r25
 5c8:	d1 f4       	brne	.+52     	; 0x5fe <logika+0xc2>
 5ca:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <pomiary_>
 5ce:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <pomiary_+0x1>
 5d2:	89 2b       	or	r24, r25
 5d4:	b9 f4       	brne	.+46     	; 0x604 <logika+0xc8>
 5d6:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <pomiary_+0x8>
 5da:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <pomiary_+0x9>
 5de:	89 2b       	or	r24, r25
 5e0:	a1 f4       	brne	.+40     	; 0x60a <logika+0xce>
// wyrzuca 0 jesli znajdzie linie do sledzenia podczas manewru, wyrzuca 1 jesli nie widzi
int logika()
{
	if((pomiary_[3] == 0) && (pomiary_[1] == 1) && (pomiary_[0] == 0) && (pomiary_[4] == 0) && (pomiary_[2] == 0 || pomiary_[2] == 1))
	{
		return 0;
 5e2:	31 e0       	ldi	r19, 0x01	; 1
 5e4:	20 e0       	ldi	r18, 0x00	; 0
 5e6:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <pomiary_+0x4>
 5ea:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <pomiary_+0x5>
 5ee:	01 97       	sbiw	r24, 0x01	; 1
 5f0:	09 f4       	brne	.+2      	; 0x5f4 <logika+0xb8>
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	83 2f       	mov	r24, r19
 5f6:	92 2f       	mov	r25, r18
 5f8:	08 95       	ret
 5fa:	c9 01       	movw	r24, r18
 5fc:	08 95       	ret
		return 0;
	}

	else
	{
		return 1;
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	08 95       	ret
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	08 95       	ret
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	08 95       	ret
	if((pomiary_[3] == 0) && (pomiary_[1] == 1) && (pomiary_[0] == 0) && (pomiary_[4] == 0) && (pomiary_[2] == 0 || pomiary_[2] == 1))
	{
		return 0;
	}

	else if ((pomiary_[3] == 1) && (pomiary_[1] == 0) && (pomiary_[0] == 0) && (pomiary_[4] == 0) && (pomiary_[2] == 0 || pomiary_[2] == 1))
 610:	81 30       	cpi	r24, 0x01	; 1
 612:	91 05       	cpc	r25, r1
 614:	09 f4       	brne	.+2      	; 0x618 <logika+0xdc>
 616:	b8 cf       	rjmp	.-144    	; 0x588 <logika+0x4c>
		return 0;
	}

	else
	{
		return 1;
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	90 e0       	ldi	r25, 0x00	; 0
	}
}   
 61c:	08 95       	ret

0000061e <delay_ms>:


//ze wzgledu na to ze funkcja _delay_ms nie pozwala na uzywanie zmiennej 
void delay_ms(uint16_t count) 
{
	while(count--)
 61e:	00 97       	sbiw	r24, 0x00	; 0
 620:	41 f0       	breq	.+16     	; 0x632 <delay_ms+0x14>
 622:	ef e9       	ldi	r30, 0x9F	; 159
 624:	ff e0       	ldi	r31, 0x0F	; 15
 626:	31 97       	sbiw	r30, 0x01	; 1
 628:	f1 f7       	brne	.-4      	; 0x626 <delay_ms+0x8>
 62a:	00 c0       	rjmp	.+0      	; 0x62c <delay_ms+0xe>
 62c:	00 00       	nop
 62e:	01 97       	sbiw	r24, 0x01	; 1
 630:	c1 f7       	brne	.-16     	; 0x622 <delay_ms+0x4>
 632:	08 95       	ret

00000634 <prosto>:


void prosto(int czas)
{
	
	PORTD |= (1 << In1);
 634:	5e 9a       	sbi	0x0b, 6	; 11
	PORTD |= (1 << In3);
 636:	5c 9a       	sbi	0x0b, 4	; 11
	
	delay_ms(czas);
 638:	0e 94 0f 03 	call	0x61e	; 0x61e <delay_ms>
	
	PORTD &= ~(1 << In1);
 63c:	5e 98       	cbi	0x0b, 6	; 11
	PORTD &= ~(1 << In3);
 63e:	5c 98       	cbi	0x0b, 4	; 11
 640:	08 95       	ret

00000642 <cofaj>:


void cofaj(int czas)
{

	PORTD |= (1 << In2);
 642:	5f 9a       	sbi	0x0b, 7	; 11
	PORTD |= (1 << In4);
 644:	5d 9a       	sbi	0x0b, 5	; 11

	delay_ms(czas);
 646:	0e 94 0f 03 	call	0x61e	; 0x61e <delay_ms>

	PORTD &= ~(1 << In2);
 64a:	5f 98       	cbi	0x0b, 7	; 11
	PORTD &= ~(1 << In4);
 64c:	5d 98       	cbi	0x0b, 5	; 11
 64e:	08 95       	ret

00000650 <decyduj>:
 * 7 = slepa uliczka
 * 8 = koniec trasy
 * 
 */
void decyduj()
{
 650:	af 92       	push	r10
 652:	bf 92       	push	r11
 654:	cf 92       	push	r12
 656:	df 92       	push	r13
 658:	ef 92       	push	r14
 65a:	ff 92       	push	r15
 65c:	0f 93       	push	r16
 65e:	1f 93       	push	r17
 660:	cf 93       	push	r28
 662:	df 93       	push	r29
 664:	cd b7       	in	r28, 0x3d	; 61
 666:	de b7       	in	r29, 0x3e	; 62
 668:	ce 56       	subi	r28, 0x6E	; 110
 66a:	d1 09       	sbc	r29, r1
 66c:	0f b6       	in	r0, 0x3f	; 63
 66e:	f8 94       	cli
 670:	de bf       	out	0x3e, r29	; 62
 672:	0f be       	out	0x3f, r0	; 63
 674:	cd bf       	out	0x3d, r28	; 61
	int pomiary_decyduj[11][5];
    //pomiar na ktorym sie zatrzymal - przed cofnieciem
    pomiar();
 676:	0e 94 76 01 	call	0x2ec	; 0x2ec <pomiar>
    pomiary_decyduj[10][0] = pomiary_[0];
 67a:	5e 01       	movw	r10, r28
 67c:	65 e6       	ldi	r22, 0x65	; 101
 67e:	a6 0e       	add	r10, r22
 680:	b1 1c       	adc	r11, r1
 682:	e3 e1       	ldi	r30, 0x13	; 19
 684:	f1 e0       	ldi	r31, 0x01	; 1
 686:	80 81       	ld	r24, Z
 688:	91 81       	ldd	r25, Z+1	; 0x01
 68a:	d5 01       	movw	r26, r10
 68c:	8d 93       	st	X+, r24
 68e:	9c 93       	st	X, r25
    pomiary_decyduj[10][1] = pomiary_[1];
 690:	82 81       	ldd	r24, Z+2	; 0x02
 692:	93 81       	ldd	r25, Z+3	; 0x03
 694:	a9 96       	adiw	r28, 0x29	; 41
 696:	9f af       	std	Y+63, r25	; 0x3f
 698:	8e af       	std	Y+62, r24	; 0x3e
 69a:	a9 97       	sbiw	r28, 0x29	; 41
    pomiary_decyduj[10][2] = pomiary_[2];
 69c:	84 81       	ldd	r24, Z+4	; 0x04
 69e:	95 81       	ldd	r25, Z+5	; 0x05
 6a0:	ab 96       	adiw	r28, 0x2b	; 43
 6a2:	9f af       	std	Y+63, r25	; 0x3f
 6a4:	8e af       	std	Y+62, r24	; 0x3e
 6a6:	ab 97       	sbiw	r28, 0x2b	; 43
    pomiary_decyduj[10][3] = pomiary_[3];
 6a8:	86 81       	ldd	r24, Z+6	; 0x06
 6aa:	97 81       	ldd	r25, Z+7	; 0x07
 6ac:	ad 96       	adiw	r28, 0x2d	; 45
 6ae:	9f af       	std	Y+63, r25	; 0x3f
 6b0:	8e af       	std	Y+62, r24	; 0x3e
 6b2:	ad 97       	sbiw	r28, 0x2d	; 45
    pomiary_decyduj[10][4] = pomiary_[4];
 6b4:	80 85       	ldd	r24, Z+8	; 0x08
 6b6:	91 85       	ldd	r25, Z+9	; 0x09
 6b8:	af 96       	adiw	r28, 0x2f	; 47
 6ba:	9f af       	std	Y+63, r25	; 0x3f
 6bc:	8e af       	std	Y+62, r24	; 0x3e
 6be:	af 97       	sbiw	r28, 0x2f	; 47

	cofaj(190);
 6c0:	8e eb       	ldi	r24, 0xBE	; 190
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	0e 94 21 03 	call	0x642	; 0x642 <cofaj>
 6c8:	fe 01       	movw	r30, r28
 6ca:	31 96       	adiw	r30, 0x01	; 1
 6cc:	6f 01       	movw	r12, r30
 6ce:	8f 01       	movw	r16, r30

	for (int i =0; i<10;i++)
	{
		pomiar();
		pomiary_decyduj[i][0] = pomiary_[0];
 6d0:	0f 2e       	mov	r0, r31
 6d2:	f3 e1       	ldi	r31, 0x13	; 19
 6d4:	ef 2e       	mov	r14, r31
 6d6:	f1 e0       	ldi	r31, 0x01	; 1
 6d8:	ff 2e       	mov	r15, r31
 6da:	f0 2d       	mov	r31, r0

	cofaj(190);

	for (int i =0; i<10;i++)
	{
		pomiar();
 6dc:	0e 94 76 01 	call	0x2ec	; 0x2ec <pomiar>
		pomiary_decyduj[i][0] = pomiary_[0];
 6e0:	d7 01       	movw	r26, r14
 6e2:	8d 91       	ld	r24, X+
 6e4:	9c 91       	ld	r25, X
 6e6:	11 97       	sbiw	r26, 0x01	; 1
 6e8:	f8 01       	movw	r30, r16
 6ea:	91 83       	std	Z+1, r25	; 0x01
 6ec:	80 83       	st	Z, r24
		pomiary_decyduj[i][1] = pomiary_[1];
 6ee:	12 96       	adiw	r26, 0x02	; 2
 6f0:	8d 91       	ld	r24, X+
 6f2:	9c 91       	ld	r25, X
 6f4:	13 97       	sbiw	r26, 0x03	; 3
 6f6:	93 83       	std	Z+3, r25	; 0x03
 6f8:	82 83       	std	Z+2, r24	; 0x02
		pomiary_decyduj[i][2] = pomiary_[2];
 6fa:	14 96       	adiw	r26, 0x04	; 4
 6fc:	8d 91       	ld	r24, X+
 6fe:	9c 91       	ld	r25, X
 700:	15 97       	sbiw	r26, 0x05	; 5
 702:	95 83       	std	Z+5, r25	; 0x05
 704:	84 83       	std	Z+4, r24	; 0x04
		pomiary_decyduj[i][3] = pomiary_[3];
 706:	16 96       	adiw	r26, 0x06	; 6
 708:	8d 91       	ld	r24, X+
 70a:	9c 91       	ld	r25, X
 70c:	17 97       	sbiw	r26, 0x07	; 7
 70e:	97 83       	std	Z+7, r25	; 0x07
 710:	86 83       	std	Z+6, r24	; 0x06
		pomiary_decyduj[i][4] = pomiary_[4];
 712:	18 96       	adiw	r26, 0x08	; 8
 714:	8d 91       	ld	r24, X+
 716:	9c 91       	ld	r25, X
 718:	19 97       	sbiw	r26, 0x09	; 9
 71a:	91 87       	std	Z+9, r25	; 0x09
 71c:	80 87       	std	Z+8, r24	; 0x08
		prosto(40);   
 71e:	88 e2       	ldi	r24, 0x28	; 40
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	0e 94 1a 03 	call	0x634	; 0x634 <prosto>
 726:	06 5f       	subi	r16, 0xF6	; 246
 728:	1f 4f       	sbci	r17, 0xFF	; 255
    pomiary_decyduj[10][3] = pomiary_[3];
    pomiary_decyduj[10][4] = pomiary_[4];

	cofaj(190);

	for (int i =0; i<10;i++)
 72a:	a0 16       	cp	r10, r16
 72c:	b1 06       	cpc	r11, r17
 72e:	b1 f6       	brne	.-84     	; 0x6dc <decyduj+0x8c>
 730:	be 01       	movw	r22, r28
 732:	61 59       	subi	r22, 0x91	; 145
 734:	7f 4f       	sbci	r23, 0xFF	; 255
 736:	f6 01       	movw	r30, r12
 738:	80 e0       	ldi	r24, 0x00	; 0
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	20 e0       	ldi	r18, 0x00	; 0
 73e:	30 e0       	ldi	r19, 0x00	; 0
		suma[2] = 0;
		suma[4] = 0;

	for (int i = 0; i<11; i++)
	{
		suma[0] = suma[0] + pomiary_decyduj[i][0];
 740:	40 81       	ld	r20, Z
 742:	51 81       	ldd	r21, Z+1	; 0x01
 744:	84 0f       	add	r24, r20
 746:	95 1f       	adc	r25, r21
		suma[4] = suma[4] + pomiary_decyduj[i][4];
 748:	40 85       	ldd	r20, Z+8	; 0x08
 74a:	51 85       	ldd	r21, Z+9	; 0x09
 74c:	24 0f       	add	r18, r20
 74e:	35 1f       	adc	r19, r21
 750:	3a 96       	adiw	r30, 0x0a	; 10
	int suma[5];
		suma[0] = 0;
		suma[2] = 0;
		suma[4] = 0;

	for (int i = 0; i<11; i++)
 752:	6e 17       	cp	r22, r30
 754:	7f 07       	cpc	r23, r31
 756:	a1 f7       	brne	.-24     	; 0x740 <decyduj+0xf0>
 758:	fe 01       	movw	r30, r28
 75a:	f3 96       	adiw	r30, 0x33	; 51
 75c:	40 e0       	ldi	r20, 0x00	; 0
 75e:	50 e0       	ldi	r21, 0x00	; 0
		suma[4] = suma[4] + pomiary_decyduj[i][4];
	}

	for (int i = 5; i<10; i++)
	{
		suma[2] = suma[2] + pomiary_decyduj[i][2];
 760:	d6 01       	movw	r26, r12
 762:	d6 96       	adiw	r26, 0x36	; 54
 764:	6d 91       	ld	r22, X+
 766:	7c 91       	ld	r23, X
 768:	d7 97       	sbiw	r26, 0x37	; 55
 76a:	46 0f       	add	r20, r22
 76c:	57 1f       	adc	r21, r23
 76e:	ba e0       	ldi	r27, 0x0A	; 10
 770:	cb 0e       	add	r12, r27
 772:	d1 1c       	adc	r13, r1
	{
		suma[0] = suma[0] + pomiary_decyduj[i][0];
		suma[4] = suma[4] + pomiary_decyduj[i][4];
	}

	for (int i = 5; i<10; i++)
 774:	ce 16       	cp	r12, r30
 776:	df 06       	cpc	r13, r31
 778:	99 f7       	brne	.-26     	; 0x760 <decyduj+0x110>
	{
		suma[2] = suma[2] + pomiary_decyduj[i][2];
	}


	if ((suma[0] >0 ) && (suma[4] >0 ) &&(suma[2] >= 2) )
 77a:	18 16       	cp	r1, r24
 77c:	19 06       	cpc	r1, r25
 77e:	c4 f5       	brge	.+112    	; 0x7f0 <decyduj+0x1a0>
 780:	12 16       	cp	r1, r18
 782:	13 06       	cpc	r1, r19
 784:	c4 f5       	brge	.+112    	; 0x7f6 <decyduj+0x1a6>
 786:	42 30       	cpi	r20, 0x02	; 2
 788:	51 05       	cpc	r21, r1
 78a:	84 f0       	brlt	.+32     	; 0x7ac <decyduj+0x15c>
	{
		if((suma[0] >= 6) &&(suma[4] >= 6) && (suma[2] >= 3) )
 78c:	06 97       	sbiw	r24, 0x06	; 6
 78e:	54 f0       	brlt	.+20     	; 0x7a4 <decyduj+0x154>
 790:	26 30       	cpi	r18, 0x06	; 6
 792:	31 05       	cpc	r19, r1
 794:	3c f0       	brlt	.+14     	; 0x7a4 <decyduj+0x154>
 796:	43 30       	cpi	r20, 0x03	; 3
 798:	51 05       	cpc	r21, r1
 79a:	24 f0       	brlt	.+8      	; 0x7a4 <decyduj+0x154>
		{
			mode = 8; //koniec trasy 
 79c:	88 e0       	ldi	r24, 0x08	; 8
 79e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 7a2:	2b c0       	rjmp	.+86     	; 0x7fa <decyduj+0x1aa>
		}
		else
		{
			mode =1; //skrzyzowanie
 7a4:	81 e0       	ldi	r24, 0x01	; 1
 7a6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 7aa:	27 c0       	rjmp	.+78     	; 0x7fa <decyduj+0x1aa>
		}
	}

	else if((suma[0] > 0) &&(suma[4] > 0) && (suma[2] <= 1) )
	{
		mode = 2;  // T
 7ac:	82 e0       	ldi	r24, 0x02	; 2
 7ae:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 7b2:	23 c0       	rjmp	.+70     	; 0x7fa <decyduj+0x1aa>
	}

	else if((suma[0] == 0) &&(suma[4] > 0) && (suma[2] <= 1) )
 7b4:	12 16       	cp	r1, r18
 7b6:	13 06       	cpc	r1, r19
 7b8:	04 f5       	brge	.+64     	; 0x7fa <decyduj+0x1aa>
 7ba:	42 30       	cpi	r20, 0x02	; 2
 7bc:	51 05       	cpc	r21, r1
 7be:	84 f4       	brge	.+32     	; 0x7e0 <decyduj+0x190>
	{
		mode = 3;   // tylko prawo
 7c0:	83 e0       	ldi	r24, 0x03	; 3
 7c2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 7c6:	19 c0       	rjmp	.+50     	; 0x7fa <decyduj+0x1aa>
	}

	else if((suma[0] > 0) &&(suma[4] == 0) && (suma[2] <= 1) )
 7c8:	18 16       	cp	r1, r24
 7ca:	19 06       	cpc	r1, r25
 7cc:	b4 f4       	brge	.+44     	; 0x7fa <decyduj+0x1aa>
 7ce:	23 2b       	or	r18, r19
 7d0:	a1 f4       	brne	.+40     	; 0x7fa <decyduj+0x1aa>
 7d2:	42 30       	cpi	r20, 0x02	; 2
 7d4:	51 05       	cpc	r21, r1
 7d6:	44 f4       	brge	.+16     	; 0x7e8 <decyduj+0x198>
	{
		mode = 4;   //tylko lewo
 7d8:	84 e0       	ldi	r24, 0x04	; 4
 7da:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 7de:	0d c0       	rjmp	.+26     	; 0x7fa <decyduj+0x1aa>
	}

	else if((suma[0] == 0) &&(suma[4] > 0) && (suma[2] >= 2) )
	{
		mode = 5;     // prosto - prawo
 7e0:	85 e0       	ldi	r24, 0x05	; 5
 7e2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 7e6:	09 c0       	rjmp	.+18     	; 0x7fa <decyduj+0x1aa>
	}

	else if((suma[0] > 0) &&(suma[4] == 0) && (suma[2] >= 2) )
	{
		mode = 6;     // prosto - lewo
 7e8:	86 e0       	ldi	r24, 0x06	; 6
 7ea:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
// z tym narazie jest taki problem ze wszystkie zera narazie sa normalna sytuacja w ktorej autko jedzie do przodu bo za czesto w srodku wywala :/
//else if((suma[0] == 0) &&(suma[4] == 0) && (suma[2] == 0) ){
//  mode = 7;     // slepa uliczka
//}

}
 7ee:	05 c0       	rjmp	.+10     	; 0x7fa <decyduj+0x1aa>
	else if((suma[0] > 0) &&(suma[4] > 0) && (suma[2] <= 1) )
	{
		mode = 2;  // T
	}

	else if((suma[0] == 0) &&(suma[4] > 0) && (suma[2] <= 1) )
 7f0:	89 2b       	or	r24, r25
 7f2:	01 f3       	breq	.-64     	; 0x7b4 <decyduj+0x164>
 7f4:	02 c0       	rjmp	.+4      	; 0x7fa <decyduj+0x1aa>
 7f6:	00 97       	sbiw	r24, 0x00	; 0
 7f8:	39 f7       	brne	.-50     	; 0x7c8 <decyduj+0x178>
// z tym narazie jest taki problem ze wszystkie zera narazie sa normalna sytuacja w ktorej autko jedzie do przodu bo za czesto w srodku wywala :/
//else if((suma[0] == 0) &&(suma[4] == 0) && (suma[2] == 0) ){
//  mode = 7;     // slepa uliczka
//}

}
 7fa:	c2 59       	subi	r28, 0x92	; 146
 7fc:	df 4f       	sbci	r29, 0xFF	; 255
 7fe:	0f b6       	in	r0, 0x3f	; 63
 800:	f8 94       	cli
 802:	de bf       	out	0x3e, r29	; 62
 804:	0f be       	out	0x3f, r0	; 63
 806:	cd bf       	out	0x3d, r28	; 61
 808:	df 91       	pop	r29
 80a:	cf 91       	pop	r28
 80c:	1f 91       	pop	r17
 80e:	0f 91       	pop	r16
 810:	ff 90       	pop	r15
 812:	ef 90       	pop	r14
 814:	df 90       	pop	r13
 816:	cf 90       	pop	r12
 818:	bf 90       	pop	r11
 81a:	af 90       	pop	r10
 81c:	08 95       	ret

0000081e <w_prawo>:


void w_prawo (int czas)
{

	PORTD |= (1 << In3);
 81e:	5c 9a       	sbi	0x0b, 4	; 11
	PORTD |= (1 << In2);
 820:	5f 9a       	sbi	0x0b, 7	; 11

	delay_ms(czas);
 822:	0e 94 0f 03 	call	0x61e	; 0x61e <delay_ms>
	
	PORTD &= ~(1 << In3);
 826:	5c 98       	cbi	0x0b, 4	; 11
	PORTD &= ~(1 << In2);
 828:	5f 98       	cbi	0x0b, 7	; 11
 82a:	08 95       	ret

0000082c <manewr_prawo>:
}

// 90 stopni w prawo
void manewr_prawo(){
	
	w_prawo(300);
 82c:	8c e2       	ldi	r24, 0x2C	; 44
 82e:	91 e0       	ldi	r25, 0x01	; 1
 830:	0e 94 0f 04 	call	0x81e	; 0x81e <w_prawo>
 834:	2f ef       	ldi	r18, 0xFF	; 255
 836:	81 ee       	ldi	r24, 0xE1	; 225
 838:	94 e0       	ldi	r25, 0x04	; 4
 83a:	21 50       	subi	r18, 0x01	; 1
 83c:	80 40       	sbci	r24, 0x00	; 0
 83e:	90 40       	sbci	r25, 0x00	; 0
 840:	e1 f7       	brne	.-8      	; 0x83a <manewr_prawo+0xe>
 842:	00 c0       	rjmp	.+0      	; 0x844 <manewr_prawo+0x18>
 844:	00 00       	nop
	_delay_ms(100);
	prosto(150);
 846:	86 e9       	ldi	r24, 0x96	; 150
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	0e 94 1a 03 	call	0x634	; 0x634 <prosto>
	w_prawo(200);
 84e:	88 ec       	ldi	r24, 0xC8	; 200
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	0e 94 0f 04 	call	0x81e	; 0x81e <w_prawo>
	do
	{
		pomiar();
 856:	0e 94 76 01 	call	0x2ec	; 0x2ec <pomiar>
		w_prawo(40);
 85a:	88 e2       	ldi	r24, 0x28	; 40
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	0e 94 0f 04 	call	0x81e	; 0x81e <w_prawo>
	}while(logika());      // kreci sie dopoki nie usyska tego co chcemy
 862:	0e 94 9e 02 	call	0x53c	; 0x53c <logika>
 866:	89 2b       	or	r24, r25
 868:	b1 f7       	brne	.-20     	; 0x856 <manewr_prawo+0x2a>
}
 86a:	08 95       	ret

0000086c <manewr_zawroc>:
		return 1;
	}
}   

//zawracanie
void manewr_zawroc(){
 86c:	cf 93       	push	r28
 86e:	df 93       	push	r29
	
	w_prawo(400);
 870:	80 e9       	ldi	r24, 0x90	; 144
 872:	91 e0       	ldi	r25, 0x01	; 1
 874:	0e 94 0f 04 	call	0x81e	; 0x81e <w_prawo>
	int j = 0;
	do
	{
		j +=1;
 878:	c1 e0       	ldi	r28, 0x01	; 1
 87a:	d0 e0       	ldi	r29, 0x00	; 0
 87c:	0a c0       	rjmp	.+20     	; 0x892 <manewr_zawroc+0x26>
 87e:	21 96       	adiw	r28, 0x01	; 1
		if (j>60)
 880:	cd 33       	cpi	r28, 0x3D	; 61
 882:	d1 05       	cpc	r29, r1
 884:	34 f0       	brlt	.+12     	; 0x892 <manewr_zawroc+0x26>
		{
			cofaj(250);
 886:	8a ef       	ldi	r24, 0xFA	; 250
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	0e 94 21 03 	call	0x642	; 0x642 <cofaj>
			j =0;
 88e:	c0 e0       	ldi	r28, 0x00	; 0
 890:	d0 e0       	ldi	r29, 0x00	; 0
		}
		pomiar();
 892:	0e 94 76 01 	call	0x2ec	; 0x2ec <pomiar>
		w_prawo(45);
 896:	8d e2       	ldi	r24, 0x2D	; 45
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	0e 94 0f 04 	call	0x81e	; 0x81e <w_prawo>
	}while(logika());
 89e:	0e 94 9e 02 	call	0x53c	; 0x53c <logika>
 8a2:	89 2b       	or	r24, r25
 8a4:	61 f7       	brne	.-40     	; 0x87e <manewr_zawroc+0x12>

}
 8a6:	df 91       	pop	r29
 8a8:	cf 91       	pop	r28
 8aa:	08 95       	ret

000008ac <w_lewo>:


void w_lewo (int czas)
{
	
	PORTD |= (1 << In1);
 8ac:	5e 9a       	sbi	0x0b, 6	; 11
	PORTD |= (1 << In4);
 8ae:	5d 9a       	sbi	0x0b, 5	; 11

	delay_ms(czas);
 8b0:	0e 94 0f 03 	call	0x61e	; 0x61e <delay_ms>
	
	PORTD &= ~(1 << In1);
 8b4:	5e 98       	cbi	0x0b, 6	; 11
	PORTD &= ~(1 << In4);
 8b6:	5d 98       	cbi	0x0b, 5	; 11
 8b8:	08 95       	ret

000008ba <manewr_lewo>:
}

//90 stopni lewo
void manewr_lewo(){
	
	w_lewo(300);
 8ba:	8c e2       	ldi	r24, 0x2C	; 44
 8bc:	91 e0       	ldi	r25, 0x01	; 1
 8be:	0e 94 56 04 	call	0x8ac	; 0x8ac <w_lewo>
	delay_ms(100);
 8c2:	84 e6       	ldi	r24, 0x64	; 100
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	0e 94 0f 03 	call	0x61e	; 0x61e <delay_ms>
	prosto(150);
 8ca:	86 e9       	ldi	r24, 0x96	; 150
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	0e 94 1a 03 	call	0x634	; 0x634 <prosto>
	w_lewo(200);
 8d2:	88 ec       	ldi	r24, 0xC8	; 200
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	0e 94 56 04 	call	0x8ac	; 0x8ac <w_lewo>
		
	do
	{
		pomiar();
 8da:	0e 94 76 01 	call	0x2ec	; 0x2ec <pomiar>
		w_lewo(40);
 8de:	88 e2       	ldi	r24, 0x28	; 40
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	0e 94 56 04 	call	0x8ac	; 0x8ac <w_lewo>
	}while(logika());	// kreci sie dopoki nie usyska tego co chcemy
 8e6:	0e 94 9e 02 	call	0x53c	; 0x53c <logika>
 8ea:	89 2b       	or	r24, r25
 8ec:	b1 f7       	brne	.-20     	; 0x8da <manewr_lewo+0x20>
}
 8ee:	08 95       	ret

000008f0 <USART_Init>:
{
	/*Set baud rate */
	/* UBRR0H contains the 4 most significant bits of the
	baud rate. UBRR0L contains the 8 least significant
	bits.*/  
	UBRR0H = (unsigned char)(ubrr>>8);
 8f0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
 8f4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	

	/*Enable transmitter */
	UCSR0B = (1<<TXEN0);
 8f8:	88 e0       	ldi	r24, 0x08	; 8
 8fa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	/* Set frame format: 8data */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 8fe:	8e e0       	ldi	r24, 0x0E	; 14
 900:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 904:	08 95       	ret

00000906 <main>:



int main(void)
{
	DDRD |= 0b11110000;
 906:	8a b1       	in	r24, 0x0a	; 10
 908:	80 6f       	ori	r24, 0xF0	; 240
 90a:	8a b9       	out	0x0a, r24	; 10
	DDRB |= 0b00000011;
 90c:	84 b1       	in	r24, 0x04	; 4
 90e:	83 60       	ori	r24, 0x03	; 3
 910:	84 b9       	out	0x04, r24	; 4
	//PORTB |= (1 << EnA) | (1 << EnB);
    USART_Init(MYUBRR);
 912:	87 e6       	ldi	r24, 0x67	; 103
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	0e 94 78 04 	call	0x8f0	; 0x8f0 <USART_Init>
	kalibracja();
 91a:	0e 94 99 01 	call	0x332	; 0x332 <kalibracja>
	setupPWM();
 91e:	0e 94 cc 00 	call	0x198	; 0x198 <setupPWM>
	int i_ = 0;
 922:	00 e0       	ldi	r16, 0x00	; 0
 924:	10 e0       	ldi	r17, 0x00	; 0
	    switch(mode){
		    case 0:

		    pomiar();

		    if ((pomiary_[1] == 0) && (pomiary_[0] == 0) && (pomiary_[2] == 1) && (pomiary_[3] == 0) && ( pomiary_[4] == 0 ))
 926:	c3 e1       	ldi	r28, 0x13	; 19
 928:	d1 e0       	ldi	r29, 0x01	; 1
		    {
			    i_ += 1;
			    if (i_ > 20)			//czasem randomowo srodek nie pokazuje dlatego zeby poradzic sobie z problem rozpoznawania slepej uliczki
			    {
				    cofaj(450);
				    mode = 7;       //wymyslilem cos takiego co stwierdza ze jestes w slepiej uliczce jak to sie stanie duzo razy pod rzad
 92a:	0f 2e       	mov	r0, r31
 92c:	f7 e0       	ldi	r31, 0x07	; 7
 92e:	ff 2e       	mov	r15, r31
 930:	f0 2d       	mov	r31, r0
	setupPWM();
	int i_ = 0;

    while (1)
    {
	    switch(mode){
 932:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	fc 01       	movw	r30, r24
 93a:	89 30       	cpi	r24, 0x09	; 9
 93c:	91 05       	cpc	r25, r1
 93e:	e0 f7       	brcc	.-8      	; 0x938 <main+0x32>
 940:	ec 5c       	subi	r30, 0xCC	; 204
 942:	ff 4f       	sbci	r31, 0xFF	; 255
 944:	0c 94 3e 07 	jmp	0xe7c	; 0xe7c <__tablejump2__>
		    case 0:

		    pomiar();
 948:	0e 94 76 01 	call	0x2ec	; 0x2ec <pomiar>

		    if ((pomiary_[1] == 0) && (pomiary_[0] == 0) && (pomiary_[2] == 1) && (pomiary_[3] == 0) && ( pomiary_[4] == 0 ))
 94c:	8a 81       	ldd	r24, Y+2	; 0x02
 94e:	9b 81       	ldd	r25, Y+3	; 0x03
 950:	00 97       	sbiw	r24, 0x00	; 0
 952:	09 f0       	breq	.+2      	; 0x956 <main+0x50>
 954:	5a c0       	rjmp	.+180    	; 0xa0a <main+0x104>
 956:	88 81       	ld	r24, Y
 958:	99 81       	ldd	r25, Y+1	; 0x01
 95a:	00 97       	sbiw	r24, 0x00	; 0
 95c:	09 f0       	breq	.+2      	; 0x960 <main+0x5a>
 95e:	05 c1       	rjmp	.+522    	; 0xb6a <main+0x264>
 960:	8c 81       	ldd	r24, Y+4	; 0x04
 962:	9d 81       	ldd	r25, Y+5	; 0x05
 964:	01 97       	sbiw	r24, 0x01	; 1
 966:	09 f0       	breq	.+2      	; 0x96a <main+0x64>
 968:	04 c1       	rjmp	.+520    	; 0xb72 <main+0x26c>
 96a:	8e 81       	ldd	r24, Y+6	; 0x06
 96c:	9f 81       	ldd	r25, Y+7	; 0x07
 96e:	89 2b       	or	r24, r25
 970:	09 f0       	breq	.+2      	; 0x974 <main+0x6e>
 972:	ff c0       	rjmp	.+510    	; 0xb72 <main+0x26c>
 974:	88 85       	ldd	r24, Y+8	; 0x08
 976:	99 85       	ldd	r25, Y+9	; 0x09
 978:	89 2b       	or	r24, r25
 97a:	09 f0       	breq	.+2      	; 0x97e <main+0x78>
 97c:	fa c0       	rjmp	.+500    	; 0xb72 <main+0x26c>
		    {
			    prosto(30);
 97e:	8e e1       	ldi	r24, 0x1E	; 30
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	0e 94 1a 03 	call	0x634	; 0x634 <prosto>
			    i_ =0;
 986:	00 e0       	ldi	r16, 0x00	; 0
 988:	10 e0       	ldi	r17, 0x00	; 0
 98a:	d3 cf       	rjmp	.-90     	; 0x932 <main+0x2c>
		    }

		    else if ((pomiary_[1] == 0) && (pomiary_[0] == 0) && (pomiary_[2] == 0) && (pomiary_[3] == 0) && ( pomiary_[4] == 0 ))
 98c:	8e 81       	ldd	r24, Y+6	; 0x06
 98e:	9f 81       	ldd	r25, Y+7	; 0x07
 990:	89 2b       	or	r24, r25
 992:	b1 f4       	brne	.+44     	; 0x9c0 <main+0xba>
 994:	88 85       	ldd	r24, Y+8	; 0x08
 996:	99 85       	ldd	r25, Y+9	; 0x09
 998:	89 2b       	or	r24, r25
 99a:	91 f4       	brne	.+36     	; 0x9c0 <main+0xba>
		    {
			    i_ += 1;
 99c:	0f 5f       	subi	r16, 0xFF	; 255
 99e:	1f 4f       	sbci	r17, 0xFF	; 255
			    if (i_ > 20)			//czasem randomowo srodek nie pokazuje dlatego zeby poradzic sobie z problem rozpoznawania slepej uliczki
 9a0:	05 31       	cpi	r16, 0x15	; 21
 9a2:	11 05       	cpc	r17, r1
 9a4:	44 f0       	brlt	.+16     	; 0x9b6 <main+0xb0>
			    {
				    cofaj(450);
 9a6:	82 ec       	ldi	r24, 0xC2	; 194
 9a8:	91 e0       	ldi	r25, 0x01	; 1
 9aa:	0e 94 21 03 	call	0x642	; 0x642 <cofaj>
				    mode = 7;       //wymyslilem cos takiego co stwierdza ze jestes w slepiej uliczce jak to sie stanie duzo razy pod rzad
 9ae:	f0 92 12 01 	sts	0x0112, r15	; 0x800112 <__data_end>
				    i_ = 0;
 9b2:	00 e0       	ldi	r16, 0x00	; 0
 9b4:	10 e0       	ldi	r17, 0x00	; 0
			    }
			    prosto(30);
 9b6:	8e e1       	ldi	r24, 0x1E	; 30
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	0e 94 1a 03 	call	0x634	; 0x634 <prosto>
 9be:	b9 cf       	rjmp	.-142    	; 0x932 <main+0x2c>
		    }
		    
		    else if ((pomiary_[1] == 0) && (pomiary_[0] == 0) && (pomiary_[2] == 1) && (pomiary_[3] == 1) && ( pomiary_[4] == 0 ))
 9c0:	8c 81       	ldd	r24, Y+4	; 0x04
 9c2:	9d 81       	ldd	r25, Y+5	; 0x05
 9c4:	01 97       	sbiw	r24, 0x01	; 1
 9c6:	09 f0       	breq	.+2      	; 0x9ca <main+0xc4>
 9c8:	da c0       	rjmp	.+436    	; 0xb7e <main+0x278>
 9ca:	8e 81       	ldd	r24, Y+6	; 0x06
 9cc:	9f 81       	ldd	r25, Y+7	; 0x07
 9ce:	01 97       	sbiw	r24, 0x01	; 1
 9d0:	09 f0       	breq	.+2      	; 0x9d4 <main+0xce>
 9d2:	d5 c0       	rjmp	.+426    	; 0xb7e <main+0x278>
 9d4:	88 85       	ldd	r24, Y+8	; 0x08
 9d6:	99 85       	ldd	r25, Y+9	; 0x09
 9d8:	89 2b       	or	r24, r25
 9da:	09 f0       	breq	.+2      	; 0x9de <main+0xd8>
 9dc:	d0 c0       	rjmp	.+416    	; 0xb7e <main+0x278>
		    {
			    w_prawo(30);
 9de:	8e e1       	ldi	r24, 0x1E	; 30
 9e0:	90 e0       	ldi	r25, 0x00	; 0
 9e2:	0e 94 0f 04 	call	0x81e	; 0x81e <w_prawo>
			    i_ =0;
 9e6:	00 e0       	ldi	r16, 0x00	; 0
 9e8:	10 e0       	ldi	r17, 0x00	; 0
 9ea:	a3 cf       	rjmp	.-186    	; 0x932 <main+0x2c>
		    }

		    else if ((pomiary_[1] == 0) && (pomiary_[0] == 0) && (pomiary_[2] == 0) && (pomiary_[3] == 1) && ( pomiary_[4] == 0 ))
 9ec:	8e 81       	ldd	r24, Y+6	; 0x06
 9ee:	9f 81       	ldd	r25, Y+7	; 0x07
 9f0:	01 97       	sbiw	r24, 0x01	; 1
 9f2:	b1 f5       	brne	.+108    	; 0xa60 <main+0x15a>
 9f4:	88 85       	ldd	r24, Y+8	; 0x08
 9f6:	99 85       	ldd	r25, Y+9	; 0x09
 9f8:	89 2b       	or	r24, r25
 9fa:	91 f5       	brne	.+100    	; 0xa60 <main+0x15a>
		    {
			    w_prawo(30);
 9fc:	8e e1       	ldi	r24, 0x1E	; 30
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	0e 94 0f 04 	call	0x81e	; 0x81e <w_prawo>
			    i_ =0;
 a04:	00 e0       	ldi	r16, 0x00	; 0
 a06:	10 e0       	ldi	r17, 0x00	; 0
 a08:	94 cf       	rjmp	.-216    	; 0x932 <main+0x2c>
		    }

		    else if ((pomiary_[1] == 1) && (pomiary_[0] == 0) && (pomiary_[2] == 1) && (pomiary_[3] == 0) && ( pomiary_[4] == 0 ))
 a0a:	01 97       	sbiw	r24, 0x01	; 1
 a0c:	49 f5       	brne	.+82     	; 0xa60 <main+0x15a>
 a0e:	88 81       	ld	r24, Y
 a10:	99 81       	ldd	r25, Y+1	; 0x01
 a12:	89 2b       	or	r24, r25
 a14:	29 f5       	brne	.+74     	; 0xa60 <main+0x15a>
 a16:	8c 81       	ldd	r24, Y+4	; 0x04
 a18:	9d 81       	ldd	r25, Y+5	; 0x05
 a1a:	01 97       	sbiw	r24, 0x01	; 1
 a1c:	09 f0       	breq	.+2      	; 0xa20 <main+0x11a>
 a1e:	b5 c0       	rjmp	.+362    	; 0xb8a <main+0x284>
 a20:	8e 81       	ldd	r24, Y+6	; 0x06
 a22:	9f 81       	ldd	r25, Y+7	; 0x07
 a24:	89 2b       	or	r24, r25
 a26:	09 f0       	breq	.+2      	; 0xa2a <main+0x124>
 a28:	b0 c0       	rjmp	.+352    	; 0xb8a <main+0x284>
 a2a:	88 85       	ldd	r24, Y+8	; 0x08
 a2c:	99 85       	ldd	r25, Y+9	; 0x09
 a2e:	89 2b       	or	r24, r25
 a30:	09 f0       	breq	.+2      	; 0xa34 <main+0x12e>
 a32:	ab c0       	rjmp	.+342    	; 0xb8a <main+0x284>
		    {
			    w_lewo(30);
 a34:	8e e1       	ldi	r24, 0x1E	; 30
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	0e 94 56 04 	call	0x8ac	; 0x8ac <w_lewo>
			    i_ =0;
 a3c:	00 e0       	ldi	r16, 0x00	; 0
 a3e:	10 e0       	ldi	r17, 0x00	; 0
 a40:	78 cf       	rjmp	.-272    	; 0x932 <main+0x2c>
		    }
		    
		    else if ((pomiary_[1] == 1) && (pomiary_[0] == 0) && (pomiary_[2] == 0) && (pomiary_[3] == 0) && ( pomiary_[4] == 0 ))
 a42:	8e 81       	ldd	r24, Y+6	; 0x06
 a44:	9f 81       	ldd	r25, Y+7	; 0x07
 a46:	89 2b       	or	r24, r25
 a48:	59 f4       	brne	.+22     	; 0xa60 <main+0x15a>
 a4a:	88 85       	ldd	r24, Y+8	; 0x08
 a4c:	99 85       	ldd	r25, Y+9	; 0x09
 a4e:	89 2b       	or	r24, r25
 a50:	39 f4       	brne	.+14     	; 0xa60 <main+0x15a>
		    {
			    w_lewo(30);
 a52:	8e e1       	ldi	r24, 0x1E	; 30
 a54:	90 e0       	ldi	r25, 0x00	; 0
 a56:	0e 94 56 04 	call	0x8ac	; 0x8ac <w_lewo>
			    i_ =0;
 a5a:	00 e0       	ldi	r16, 0x00	; 0
 a5c:	10 e0       	ldi	r17, 0x00	; 0
 a5e:	69 cf       	rjmp	.-302    	; 0x932 <main+0x2c>
 a60:	2f ef       	ldi	r18, 0xFF	; 255
 a62:	85 ea       	ldi	r24, 0xA5	; 165
 a64:	9e e0       	ldi	r25, 0x0E	; 14
 a66:	21 50       	subi	r18, 0x01	; 1
 a68:	80 40       	sbci	r24, 0x00	; 0
 a6a:	90 40       	sbci	r25, 0x00	; 0
 a6c:	e1 f7       	brne	.-8      	; 0xa66 <main+0x160>
 a6e:	00 c0       	rjmp	.+0      	; 0xa70 <main+0x16a>
 a70:	00 00       	nop
		    }

		    else
		    {
			    _delay_ms(300);
			    decyduj();
 a72:	0e 94 28 03 	call	0x650	; 0x650 <decyduj>
 a76:	2f ef       	ldi	r18, 0xFF	; 255
 a78:	85 ea       	ldi	r24, 0xA5	; 165
 a7a:	9e e0       	ldi	r25, 0x0E	; 14
 a7c:	21 50       	subi	r18, 0x01	; 1
 a7e:	80 40       	sbci	r24, 0x00	; 0
 a80:	90 40       	sbci	r25, 0x00	; 0
 a82:	e1 f7       	brne	.-8      	; 0xa7c <main+0x176>
 a84:	00 c0       	rjmp	.+0      	; 0xa86 <main+0x180>
 a86:	00 00       	nop
			    _delay_ms(300);
			    i_ =0;
 a88:	00 e0       	ldi	r16, 0x00	; 0
 a8a:	10 e0       	ldi	r17, 0x00	; 0
 a8c:	52 cf       	rjmp	.-348    	; 0x932 <main+0x2c>
		    }

		    break;
		    
		    case 1:
		    manewr_lewo();
 a8e:	0e 94 5d 04 	call	0x8ba	; 0x8ba <manewr_lewo>
		    mode = 0;
 a92:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
 a96:	2f ef       	ldi	r18, 0xFF	; 255
 a98:	85 ea       	ldi	r24, 0xA5	; 165
 a9a:	9e e0       	ldi	r25, 0x0E	; 14
 a9c:	21 50       	subi	r18, 0x01	; 1
 a9e:	80 40       	sbci	r24, 0x00	; 0
 aa0:	90 40       	sbci	r25, 0x00	; 0
 aa2:	e1 f7       	brne	.-8      	; 0xa9c <main+0x196>
 aa4:	00 c0       	rjmp	.+0      	; 0xaa6 <main+0x1a0>
 aa6:	00 00       	nop
 aa8:	44 cf       	rjmp	.-376    	; 0x932 <main+0x2c>
		    _delay_ms(300);
		    break;

		    case 2:
		    manewr_lewo();
 aaa:	0e 94 5d 04 	call	0x8ba	; 0x8ba <manewr_lewo>
		    mode = 0;
 aae:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
 ab2:	2f ef       	ldi	r18, 0xFF	; 255
 ab4:	85 ea       	ldi	r24, 0xA5	; 165
 ab6:	9e e0       	ldi	r25, 0x0E	; 14
 ab8:	21 50       	subi	r18, 0x01	; 1
 aba:	80 40       	sbci	r24, 0x00	; 0
 abc:	90 40       	sbci	r25, 0x00	; 0
 abe:	e1 f7       	brne	.-8      	; 0xab8 <main+0x1b2>
 ac0:	00 c0       	rjmp	.+0      	; 0xac2 <main+0x1bc>
 ac2:	00 00       	nop
 ac4:	36 cf       	rjmp	.-404    	; 0x932 <main+0x2c>
		    _delay_ms(300);
		    break;

		    case 3:
		    manewr_prawo();
 ac6:	0e 94 16 04 	call	0x82c	; 0x82c <manewr_prawo>
		    mode = 0;
 aca:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
 ace:	2f ef       	ldi	r18, 0xFF	; 255
 ad0:	85 ea       	ldi	r24, 0xA5	; 165
 ad2:	9e e0       	ldi	r25, 0x0E	; 14
 ad4:	21 50       	subi	r18, 0x01	; 1
 ad6:	80 40       	sbci	r24, 0x00	; 0
 ad8:	90 40       	sbci	r25, 0x00	; 0
 ada:	e1 f7       	brne	.-8      	; 0xad4 <main+0x1ce>
 adc:	00 c0       	rjmp	.+0      	; 0xade <main+0x1d8>
 ade:	00 00       	nop
 ae0:	28 cf       	rjmp	.-432    	; 0x932 <main+0x2c>
		    _delay_ms(300);
		    break;

		    case 4:
		    manewr_lewo();
 ae2:	0e 94 5d 04 	call	0x8ba	; 0x8ba <manewr_lewo>
		    mode = 0;
 ae6:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
 aea:	2f ef       	ldi	r18, 0xFF	; 255
 aec:	85 ea       	ldi	r24, 0xA5	; 165
 aee:	9e e0       	ldi	r25, 0x0E	; 14
 af0:	21 50       	subi	r18, 0x01	; 1
 af2:	80 40       	sbci	r24, 0x00	; 0
 af4:	90 40       	sbci	r25, 0x00	; 0
 af6:	e1 f7       	brne	.-8      	; 0xaf0 <main+0x1ea>
 af8:	00 c0       	rjmp	.+0      	; 0xafa <main+0x1f4>
 afa:	00 00       	nop
 afc:	1a cf       	rjmp	.-460    	; 0x932 <main+0x2c>
		    _delay_ms(300);
		    break;

		    case 5:
		    //jedz dalej
		    mode = 0;
 afe:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
		    break;
 b02:	17 cf       	rjmp	.-466    	; 0x932 <main+0x2c>

		    case 6:
		    manewr_lewo();
 b04:	0e 94 5d 04 	call	0x8ba	; 0x8ba <manewr_lewo>
		    mode = 0;
 b08:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
 b0c:	2f ef       	ldi	r18, 0xFF	; 255
 b0e:	85 ea       	ldi	r24, 0xA5	; 165
 b10:	9e e0       	ldi	r25, 0x0E	; 14
 b12:	21 50       	subi	r18, 0x01	; 1
 b14:	80 40       	sbci	r24, 0x00	; 0
 b16:	90 40       	sbci	r25, 0x00	; 0
 b18:	e1 f7       	brne	.-8      	; 0xb12 <main+0x20c>
 b1a:	00 c0       	rjmp	.+0      	; 0xb1c <main+0x216>
 b1c:	00 00       	nop
 b1e:	09 cf       	rjmp	.-494    	; 0x932 <main+0x2c>
		    _delay_ms(300);
		    break;

		    case 7:
		    manewr_zawroc();
 b20:	0e 94 36 04 	call	0x86c	; 0x86c <manewr_zawroc>
		    mode = 0;
 b24:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
 b28:	2f ef       	ldi	r18, 0xFF	; 255
 b2a:	85 ea       	ldi	r24, 0xA5	; 165
 b2c:	9e e0       	ldi	r25, 0x0E	; 14
 b2e:	21 50       	subi	r18, 0x01	; 1
 b30:	80 40       	sbci	r24, 0x00	; 0
 b32:	90 40       	sbci	r25, 0x00	; 0
 b34:	e1 f7       	brne	.-8      	; 0xb2e <main+0x228>
 b36:	00 c0       	rjmp	.+0      	; 0xb38 <main+0x232>
 b38:	00 00       	nop
 b3a:	fb ce       	rjmp	.-522    	; 0x932 <main+0x2c>
		    _delay_ms(300);
		    break;

		    case 8:
		    mode = 0;
 b3c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
		    while(1)
		    {
			    PORTB |= (1 << PORTB4);
 b40:	2c 9a       	sbi	0x05, 4	; 5
 b42:	2f ef       	ldi	r18, 0xFF	; 255
 b44:	83 ec       	ldi	r24, 0xC3	; 195
 b46:	99 e0       	ldi	r25, 0x09	; 9
 b48:	21 50       	subi	r18, 0x01	; 1
 b4a:	80 40       	sbci	r24, 0x00	; 0
 b4c:	90 40       	sbci	r25, 0x00	; 0
 b4e:	e1 f7       	brne	.-8      	; 0xb48 <main+0x242>
 b50:	00 c0       	rjmp	.+0      	; 0xb52 <main+0x24c>
 b52:	00 00       	nop
			    _delay_ms(200);
			    PORTB &= ~(1 << PORTB4);
 b54:	2c 98       	cbi	0x05, 4	; 5
 b56:	2f ef       	ldi	r18, 0xFF	; 255
 b58:	83 ec       	ldi	r24, 0xC3	; 195
 b5a:	99 e0       	ldi	r25, 0x09	; 9
 b5c:	21 50       	subi	r18, 0x01	; 1
 b5e:	80 40       	sbci	r24, 0x00	; 0
 b60:	90 40       	sbci	r25, 0x00	; 0
 b62:	e1 f7       	brne	.-8      	; 0xb5c <main+0x256>
 b64:	00 c0       	rjmp	.+0      	; 0xb66 <main+0x260>
 b66:	00 00       	nop
 b68:	eb cf       	rjmp	.-42     	; 0xb40 <main+0x23a>
				    i_ = 0;
			    }
			    prosto(30);
		    }
		    
		    else if ((pomiary_[1] == 0) && (pomiary_[0] == 0) && (pomiary_[2] == 1) && (pomiary_[3] == 1) && ( pomiary_[4] == 0 ))
 b6a:	89 2b       	or	r24, r25
 b6c:	09 f4       	brne	.+2      	; 0xb70 <main+0x26a>
 b6e:	28 cf       	rjmp	.-432    	; 0x9c0 <main+0xba>
 b70:	77 cf       	rjmp	.-274    	; 0xa60 <main+0x15a>
		    {
			    prosto(30);
			    i_ =0;
		    }

		    else if ((pomiary_[1] == 0) && (pomiary_[0] == 0) && (pomiary_[2] == 0) && (pomiary_[3] == 0) && ( pomiary_[4] == 0 ))
 b72:	8c 81       	ldd	r24, Y+4	; 0x04
 b74:	9d 81       	ldd	r25, Y+5	; 0x05
 b76:	89 2b       	or	r24, r25
 b78:	09 f4       	brne	.+2      	; 0xb7c <main+0x276>
 b7a:	08 cf       	rjmp	.-496    	; 0x98c <main+0x86>
 b7c:	21 cf       	rjmp	.-446    	; 0x9c0 <main+0xba>
		    {
			    w_prawo(30);
			    i_ =0;
		    }

		    else if ((pomiary_[1] == 0) && (pomiary_[0] == 0) && (pomiary_[2] == 0) && (pomiary_[3] == 1) && ( pomiary_[4] == 0 ))
 b7e:	8c 81       	ldd	r24, Y+4	; 0x04
 b80:	9d 81       	ldd	r25, Y+5	; 0x05
 b82:	89 2b       	or	r24, r25
 b84:	09 f4       	brne	.+2      	; 0xb88 <main+0x282>
 b86:	32 cf       	rjmp	.-412    	; 0x9ec <main+0xe6>
 b88:	6b cf       	rjmp	.-298    	; 0xa60 <main+0x15a>
		    {
			    w_lewo(30);
			    i_ =0;
		    }
		    
		    else if ((pomiary_[1] == 1) && (pomiary_[0] == 0) && (pomiary_[2] == 0) && (pomiary_[3] == 0) && ( pomiary_[4] == 0 ))
 b8a:	8c 81       	ldd	r24, Y+4	; 0x04
 b8c:	9d 81       	ldd	r25, Y+5	; 0x05
 b8e:	89 2b       	or	r24, r25
 b90:	09 f4       	brne	.+2      	; 0xb94 <main+0x28e>
 b92:	57 cf       	rjmp	.-338    	; 0xa42 <main+0x13c>
 b94:	65 cf       	rjmp	.-310    	; 0xa60 <main+0x15a>

00000b96 <__divsf3>:
 b96:	0e 94 df 05 	call	0xbbe	; 0xbbe <__divsf3x>
 b9a:	0c 94 83 06 	jmp	0xd06	; 0xd06 <__fp_round>
 b9e:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__fp_pscB>
 ba2:	58 f0       	brcs	.+22     	; 0xbba <__divsf3+0x24>
 ba4:	0e 94 75 06 	call	0xcea	; 0xcea <__fp_pscA>
 ba8:	40 f0       	brcs	.+16     	; 0xbba <__divsf3+0x24>
 baa:	29 f4       	brne	.+10     	; 0xbb6 <__divsf3+0x20>
 bac:	5f 3f       	cpi	r21, 0xFF	; 255
 bae:	29 f0       	breq	.+10     	; 0xbba <__divsf3+0x24>
 bb0:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__fp_inf>
 bb4:	51 11       	cpse	r21, r1
 bb6:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <__fp_szero>
 bba:	0c 94 72 06 	jmp	0xce4	; 0xce4 <__fp_nan>

00000bbe <__divsf3x>:
 bbe:	0e 94 94 06 	call	0xd28	; 0xd28 <__fp_split3>
 bc2:	68 f3       	brcs	.-38     	; 0xb9e <__divsf3+0x8>

00000bc4 <__divsf3_pse>:
 bc4:	99 23       	and	r25, r25
 bc6:	b1 f3       	breq	.-20     	; 0xbb4 <__divsf3+0x1e>
 bc8:	55 23       	and	r21, r21
 bca:	91 f3       	breq	.-28     	; 0xbb0 <__divsf3+0x1a>
 bcc:	95 1b       	sub	r25, r21
 bce:	55 0b       	sbc	r21, r21
 bd0:	bb 27       	eor	r27, r27
 bd2:	aa 27       	eor	r26, r26
 bd4:	62 17       	cp	r22, r18
 bd6:	73 07       	cpc	r23, r19
 bd8:	84 07       	cpc	r24, r20
 bda:	38 f0       	brcs	.+14     	; 0xbea <__divsf3_pse+0x26>
 bdc:	9f 5f       	subi	r25, 0xFF	; 255
 bde:	5f 4f       	sbci	r21, 0xFF	; 255
 be0:	22 0f       	add	r18, r18
 be2:	33 1f       	adc	r19, r19
 be4:	44 1f       	adc	r20, r20
 be6:	aa 1f       	adc	r26, r26
 be8:	a9 f3       	breq	.-22     	; 0xbd4 <__divsf3_pse+0x10>
 bea:	35 d0       	rcall	.+106    	; 0xc56 <__divsf3_pse+0x92>
 bec:	0e 2e       	mov	r0, r30
 bee:	3a f0       	brmi	.+14     	; 0xbfe <__divsf3_pse+0x3a>
 bf0:	e0 e8       	ldi	r30, 0x80	; 128
 bf2:	32 d0       	rcall	.+100    	; 0xc58 <__divsf3_pse+0x94>
 bf4:	91 50       	subi	r25, 0x01	; 1
 bf6:	50 40       	sbci	r21, 0x00	; 0
 bf8:	e6 95       	lsr	r30
 bfa:	00 1c       	adc	r0, r0
 bfc:	ca f7       	brpl	.-14     	; 0xbf0 <__divsf3_pse+0x2c>
 bfe:	2b d0       	rcall	.+86     	; 0xc56 <__divsf3_pse+0x92>
 c00:	fe 2f       	mov	r31, r30
 c02:	29 d0       	rcall	.+82     	; 0xc56 <__divsf3_pse+0x92>
 c04:	66 0f       	add	r22, r22
 c06:	77 1f       	adc	r23, r23
 c08:	88 1f       	adc	r24, r24
 c0a:	bb 1f       	adc	r27, r27
 c0c:	26 17       	cp	r18, r22
 c0e:	37 07       	cpc	r19, r23
 c10:	48 07       	cpc	r20, r24
 c12:	ab 07       	cpc	r26, r27
 c14:	b0 e8       	ldi	r27, 0x80	; 128
 c16:	09 f0       	breq	.+2      	; 0xc1a <__divsf3_pse+0x56>
 c18:	bb 0b       	sbc	r27, r27
 c1a:	80 2d       	mov	r24, r0
 c1c:	bf 01       	movw	r22, r30
 c1e:	ff 27       	eor	r31, r31
 c20:	93 58       	subi	r25, 0x83	; 131
 c22:	5f 4f       	sbci	r21, 0xFF	; 255
 c24:	3a f0       	brmi	.+14     	; 0xc34 <__divsf3_pse+0x70>
 c26:	9e 3f       	cpi	r25, 0xFE	; 254
 c28:	51 05       	cpc	r21, r1
 c2a:	78 f0       	brcs	.+30     	; 0xc4a <__divsf3_pse+0x86>
 c2c:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__fp_inf>
 c30:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <__fp_szero>
 c34:	5f 3f       	cpi	r21, 0xFF	; 255
 c36:	e4 f3       	brlt	.-8      	; 0xc30 <__divsf3_pse+0x6c>
 c38:	98 3e       	cpi	r25, 0xE8	; 232
 c3a:	d4 f3       	brlt	.-12     	; 0xc30 <__divsf3_pse+0x6c>
 c3c:	86 95       	lsr	r24
 c3e:	77 95       	ror	r23
 c40:	67 95       	ror	r22
 c42:	b7 95       	ror	r27
 c44:	f7 95       	ror	r31
 c46:	9f 5f       	subi	r25, 0xFF	; 255
 c48:	c9 f7       	brne	.-14     	; 0xc3c <__divsf3_pse+0x78>
 c4a:	88 0f       	add	r24, r24
 c4c:	91 1d       	adc	r25, r1
 c4e:	96 95       	lsr	r25
 c50:	87 95       	ror	r24
 c52:	97 f9       	bld	r25, 7
 c54:	08 95       	ret
 c56:	e1 e0       	ldi	r30, 0x01	; 1
 c58:	66 0f       	add	r22, r22
 c5a:	77 1f       	adc	r23, r23
 c5c:	88 1f       	adc	r24, r24
 c5e:	bb 1f       	adc	r27, r27
 c60:	62 17       	cp	r22, r18
 c62:	73 07       	cpc	r23, r19
 c64:	84 07       	cpc	r24, r20
 c66:	ba 07       	cpc	r27, r26
 c68:	20 f0       	brcs	.+8      	; 0xc72 <__divsf3_pse+0xae>
 c6a:	62 1b       	sub	r22, r18
 c6c:	73 0b       	sbc	r23, r19
 c6e:	84 0b       	sbc	r24, r20
 c70:	ba 0b       	sbc	r27, r26
 c72:	ee 1f       	adc	r30, r30
 c74:	88 f7       	brcc	.-30     	; 0xc58 <__divsf3_pse+0x94>
 c76:	e0 95       	com	r30
 c78:	08 95       	ret

00000c7a <__fixunssfsi>:
 c7a:	0e 94 9c 06 	call	0xd38	; 0xd38 <__fp_splitA>
 c7e:	88 f0       	brcs	.+34     	; 0xca2 <__fixunssfsi+0x28>
 c80:	9f 57       	subi	r25, 0x7F	; 127
 c82:	98 f0       	brcs	.+38     	; 0xcaa <__fixunssfsi+0x30>
 c84:	b9 2f       	mov	r27, r25
 c86:	99 27       	eor	r25, r25
 c88:	b7 51       	subi	r27, 0x17	; 23
 c8a:	b0 f0       	brcs	.+44     	; 0xcb8 <__fixunssfsi+0x3e>
 c8c:	e1 f0       	breq	.+56     	; 0xcc6 <__fixunssfsi+0x4c>
 c8e:	66 0f       	add	r22, r22
 c90:	77 1f       	adc	r23, r23
 c92:	88 1f       	adc	r24, r24
 c94:	99 1f       	adc	r25, r25
 c96:	1a f0       	brmi	.+6      	; 0xc9e <__fixunssfsi+0x24>
 c98:	ba 95       	dec	r27
 c9a:	c9 f7       	brne	.-14     	; 0xc8e <__fixunssfsi+0x14>
 c9c:	14 c0       	rjmp	.+40     	; 0xcc6 <__fixunssfsi+0x4c>
 c9e:	b1 30       	cpi	r27, 0x01	; 1
 ca0:	91 f0       	breq	.+36     	; 0xcc6 <__fixunssfsi+0x4c>
 ca2:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fp_zero>
 ca6:	b1 e0       	ldi	r27, 0x01	; 1
 ca8:	08 95       	ret
 caa:	0c 94 b6 06 	jmp	0xd6c	; 0xd6c <__fp_zero>
 cae:	67 2f       	mov	r22, r23
 cb0:	78 2f       	mov	r23, r24
 cb2:	88 27       	eor	r24, r24
 cb4:	b8 5f       	subi	r27, 0xF8	; 248
 cb6:	39 f0       	breq	.+14     	; 0xcc6 <__fixunssfsi+0x4c>
 cb8:	b9 3f       	cpi	r27, 0xF9	; 249
 cba:	cc f3       	brlt	.-14     	; 0xcae <__fixunssfsi+0x34>
 cbc:	86 95       	lsr	r24
 cbe:	77 95       	ror	r23
 cc0:	67 95       	ror	r22
 cc2:	b3 95       	inc	r27
 cc4:	d9 f7       	brne	.-10     	; 0xcbc <__fixunssfsi+0x42>
 cc6:	3e f4       	brtc	.+14     	; 0xcd6 <__fixunssfsi+0x5c>
 cc8:	90 95       	com	r25
 cca:	80 95       	com	r24
 ccc:	70 95       	com	r23
 cce:	61 95       	neg	r22
 cd0:	7f 4f       	sbci	r23, 0xFF	; 255
 cd2:	8f 4f       	sbci	r24, 0xFF	; 255
 cd4:	9f 4f       	sbci	r25, 0xFF	; 255
 cd6:	08 95       	ret

00000cd8 <__fp_inf>:
 cd8:	97 f9       	bld	r25, 7
 cda:	9f 67       	ori	r25, 0x7F	; 127
 cdc:	80 e8       	ldi	r24, 0x80	; 128
 cde:	70 e0       	ldi	r23, 0x00	; 0
 ce0:	60 e0       	ldi	r22, 0x00	; 0
 ce2:	08 95       	ret

00000ce4 <__fp_nan>:
 ce4:	9f ef       	ldi	r25, 0xFF	; 255
 ce6:	80 ec       	ldi	r24, 0xC0	; 192
 ce8:	08 95       	ret

00000cea <__fp_pscA>:
 cea:	00 24       	eor	r0, r0
 cec:	0a 94       	dec	r0
 cee:	16 16       	cp	r1, r22
 cf0:	17 06       	cpc	r1, r23
 cf2:	18 06       	cpc	r1, r24
 cf4:	09 06       	cpc	r0, r25
 cf6:	08 95       	ret

00000cf8 <__fp_pscB>:
 cf8:	00 24       	eor	r0, r0
 cfa:	0a 94       	dec	r0
 cfc:	12 16       	cp	r1, r18
 cfe:	13 06       	cpc	r1, r19
 d00:	14 06       	cpc	r1, r20
 d02:	05 06       	cpc	r0, r21
 d04:	08 95       	ret

00000d06 <__fp_round>:
 d06:	09 2e       	mov	r0, r25
 d08:	03 94       	inc	r0
 d0a:	00 0c       	add	r0, r0
 d0c:	11 f4       	brne	.+4      	; 0xd12 <__fp_round+0xc>
 d0e:	88 23       	and	r24, r24
 d10:	52 f0       	brmi	.+20     	; 0xd26 <__fp_round+0x20>
 d12:	bb 0f       	add	r27, r27
 d14:	40 f4       	brcc	.+16     	; 0xd26 <__fp_round+0x20>
 d16:	bf 2b       	or	r27, r31
 d18:	11 f4       	brne	.+4      	; 0xd1e <__fp_round+0x18>
 d1a:	60 ff       	sbrs	r22, 0
 d1c:	04 c0       	rjmp	.+8      	; 0xd26 <__fp_round+0x20>
 d1e:	6f 5f       	subi	r22, 0xFF	; 255
 d20:	7f 4f       	sbci	r23, 0xFF	; 255
 d22:	8f 4f       	sbci	r24, 0xFF	; 255
 d24:	9f 4f       	sbci	r25, 0xFF	; 255
 d26:	08 95       	ret

00000d28 <__fp_split3>:
 d28:	57 fd       	sbrc	r21, 7
 d2a:	90 58       	subi	r25, 0x80	; 128
 d2c:	44 0f       	add	r20, r20
 d2e:	55 1f       	adc	r21, r21
 d30:	59 f0       	breq	.+22     	; 0xd48 <__fp_splitA+0x10>
 d32:	5f 3f       	cpi	r21, 0xFF	; 255
 d34:	71 f0       	breq	.+28     	; 0xd52 <__fp_splitA+0x1a>
 d36:	47 95       	ror	r20

00000d38 <__fp_splitA>:
 d38:	88 0f       	add	r24, r24
 d3a:	97 fb       	bst	r25, 7
 d3c:	99 1f       	adc	r25, r25
 d3e:	61 f0       	breq	.+24     	; 0xd58 <__fp_splitA+0x20>
 d40:	9f 3f       	cpi	r25, 0xFF	; 255
 d42:	79 f0       	breq	.+30     	; 0xd62 <__fp_splitA+0x2a>
 d44:	87 95       	ror	r24
 d46:	08 95       	ret
 d48:	12 16       	cp	r1, r18
 d4a:	13 06       	cpc	r1, r19
 d4c:	14 06       	cpc	r1, r20
 d4e:	55 1f       	adc	r21, r21
 d50:	f2 cf       	rjmp	.-28     	; 0xd36 <__fp_split3+0xe>
 d52:	46 95       	lsr	r20
 d54:	f1 df       	rcall	.-30     	; 0xd38 <__fp_splitA>
 d56:	08 c0       	rjmp	.+16     	; 0xd68 <__fp_splitA+0x30>
 d58:	16 16       	cp	r1, r22
 d5a:	17 06       	cpc	r1, r23
 d5c:	18 06       	cpc	r1, r24
 d5e:	99 1f       	adc	r25, r25
 d60:	f1 cf       	rjmp	.-30     	; 0xd44 <__fp_splitA+0xc>
 d62:	86 95       	lsr	r24
 d64:	71 05       	cpc	r23, r1
 d66:	61 05       	cpc	r22, r1
 d68:	08 94       	sec
 d6a:	08 95       	ret

00000d6c <__fp_zero>:
 d6c:	e8 94       	clt

00000d6e <__fp_szero>:
 d6e:	bb 27       	eor	r27, r27
 d70:	66 27       	eor	r22, r22
 d72:	77 27       	eor	r23, r23
 d74:	cb 01       	movw	r24, r22
 d76:	97 f9       	bld	r25, 7
 d78:	08 95       	ret

00000d7a <__mulsf3>:
 d7a:	0e 94 d0 06 	call	0xda0	; 0xda0 <__mulsf3x>
 d7e:	0c 94 83 06 	jmp	0xd06	; 0xd06 <__fp_round>
 d82:	0e 94 75 06 	call	0xcea	; 0xcea <__fp_pscA>
 d86:	38 f0       	brcs	.+14     	; 0xd96 <__mulsf3+0x1c>
 d88:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__fp_pscB>
 d8c:	20 f0       	brcs	.+8      	; 0xd96 <__mulsf3+0x1c>
 d8e:	95 23       	and	r25, r21
 d90:	11 f0       	breq	.+4      	; 0xd96 <__mulsf3+0x1c>
 d92:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__fp_inf>
 d96:	0c 94 72 06 	jmp	0xce4	; 0xce4 <__fp_nan>
 d9a:	11 24       	eor	r1, r1
 d9c:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <__fp_szero>

00000da0 <__mulsf3x>:
 da0:	0e 94 94 06 	call	0xd28	; 0xd28 <__fp_split3>
 da4:	70 f3       	brcs	.-36     	; 0xd82 <__mulsf3+0x8>

00000da6 <__mulsf3_pse>:
 da6:	95 9f       	mul	r25, r21
 da8:	c1 f3       	breq	.-16     	; 0xd9a <__mulsf3+0x20>
 daa:	95 0f       	add	r25, r21
 dac:	50 e0       	ldi	r21, 0x00	; 0
 dae:	55 1f       	adc	r21, r21
 db0:	62 9f       	mul	r22, r18
 db2:	f0 01       	movw	r30, r0
 db4:	72 9f       	mul	r23, r18
 db6:	bb 27       	eor	r27, r27
 db8:	f0 0d       	add	r31, r0
 dba:	b1 1d       	adc	r27, r1
 dbc:	63 9f       	mul	r22, r19
 dbe:	aa 27       	eor	r26, r26
 dc0:	f0 0d       	add	r31, r0
 dc2:	b1 1d       	adc	r27, r1
 dc4:	aa 1f       	adc	r26, r26
 dc6:	64 9f       	mul	r22, r20
 dc8:	66 27       	eor	r22, r22
 dca:	b0 0d       	add	r27, r0
 dcc:	a1 1d       	adc	r26, r1
 dce:	66 1f       	adc	r22, r22
 dd0:	82 9f       	mul	r24, r18
 dd2:	22 27       	eor	r18, r18
 dd4:	b0 0d       	add	r27, r0
 dd6:	a1 1d       	adc	r26, r1
 dd8:	62 1f       	adc	r22, r18
 dda:	73 9f       	mul	r23, r19
 ddc:	b0 0d       	add	r27, r0
 dde:	a1 1d       	adc	r26, r1
 de0:	62 1f       	adc	r22, r18
 de2:	83 9f       	mul	r24, r19
 de4:	a0 0d       	add	r26, r0
 de6:	61 1d       	adc	r22, r1
 de8:	22 1f       	adc	r18, r18
 dea:	74 9f       	mul	r23, r20
 dec:	33 27       	eor	r19, r19
 dee:	a0 0d       	add	r26, r0
 df0:	61 1d       	adc	r22, r1
 df2:	23 1f       	adc	r18, r19
 df4:	84 9f       	mul	r24, r20
 df6:	60 0d       	add	r22, r0
 df8:	21 1d       	adc	r18, r1
 dfa:	82 2f       	mov	r24, r18
 dfc:	76 2f       	mov	r23, r22
 dfe:	6a 2f       	mov	r22, r26
 e00:	11 24       	eor	r1, r1
 e02:	9f 57       	subi	r25, 0x7F	; 127
 e04:	50 40       	sbci	r21, 0x00	; 0
 e06:	9a f0       	brmi	.+38     	; 0xe2e <__mulsf3_pse+0x88>
 e08:	f1 f0       	breq	.+60     	; 0xe46 <__mulsf3_pse+0xa0>
 e0a:	88 23       	and	r24, r24
 e0c:	4a f0       	brmi	.+18     	; 0xe20 <__mulsf3_pse+0x7a>
 e0e:	ee 0f       	add	r30, r30
 e10:	ff 1f       	adc	r31, r31
 e12:	bb 1f       	adc	r27, r27
 e14:	66 1f       	adc	r22, r22
 e16:	77 1f       	adc	r23, r23
 e18:	88 1f       	adc	r24, r24
 e1a:	91 50       	subi	r25, 0x01	; 1
 e1c:	50 40       	sbci	r21, 0x00	; 0
 e1e:	a9 f7       	brne	.-22     	; 0xe0a <__mulsf3_pse+0x64>
 e20:	9e 3f       	cpi	r25, 0xFE	; 254
 e22:	51 05       	cpc	r21, r1
 e24:	80 f0       	brcs	.+32     	; 0xe46 <__mulsf3_pse+0xa0>
 e26:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__fp_inf>
 e2a:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <__fp_szero>
 e2e:	5f 3f       	cpi	r21, 0xFF	; 255
 e30:	e4 f3       	brlt	.-8      	; 0xe2a <__mulsf3_pse+0x84>
 e32:	98 3e       	cpi	r25, 0xE8	; 232
 e34:	d4 f3       	brlt	.-12     	; 0xe2a <__mulsf3_pse+0x84>
 e36:	86 95       	lsr	r24
 e38:	77 95       	ror	r23
 e3a:	67 95       	ror	r22
 e3c:	b7 95       	ror	r27
 e3e:	f7 95       	ror	r31
 e40:	e7 95       	ror	r30
 e42:	9f 5f       	subi	r25, 0xFF	; 255
 e44:	c1 f7       	brne	.-16     	; 0xe36 <__mulsf3_pse+0x90>
 e46:	fe 2b       	or	r31, r30
 e48:	88 0f       	add	r24, r24
 e4a:	91 1d       	adc	r25, r1
 e4c:	96 95       	lsr	r25
 e4e:	87 95       	ror	r24
 e50:	97 f9       	bld	r25, 7
 e52:	08 95       	ret

00000e54 <__divmodhi4>:
 e54:	97 fb       	bst	r25, 7
 e56:	07 2e       	mov	r0, r23
 e58:	16 f4       	brtc	.+4      	; 0xe5e <__divmodhi4+0xa>
 e5a:	00 94       	com	r0
 e5c:	07 d0       	rcall	.+14     	; 0xe6c <__divmodhi4_neg1>
 e5e:	77 fd       	sbrc	r23, 7
 e60:	09 d0       	rcall	.+18     	; 0xe74 <__divmodhi4_neg2>
 e62:	0e 94 44 07 	call	0xe88	; 0xe88 <__udivmodhi4>
 e66:	07 fc       	sbrc	r0, 7
 e68:	05 d0       	rcall	.+10     	; 0xe74 <__divmodhi4_neg2>
 e6a:	3e f4       	brtc	.+14     	; 0xe7a <__divmodhi4_exit>

00000e6c <__divmodhi4_neg1>:
 e6c:	90 95       	com	r25
 e6e:	81 95       	neg	r24
 e70:	9f 4f       	sbci	r25, 0xFF	; 255
 e72:	08 95       	ret

00000e74 <__divmodhi4_neg2>:
 e74:	70 95       	com	r23
 e76:	61 95       	neg	r22
 e78:	7f 4f       	sbci	r23, 0xFF	; 255

00000e7a <__divmodhi4_exit>:
 e7a:	08 95       	ret

00000e7c <__tablejump2__>:
 e7c:	ee 0f       	add	r30, r30
 e7e:	ff 1f       	adc	r31, r31
 e80:	05 90       	lpm	r0, Z+
 e82:	f4 91       	lpm	r31, Z
 e84:	e0 2d       	mov	r30, r0
 e86:	09 94       	ijmp

00000e88 <__udivmodhi4>:
 e88:	aa 1b       	sub	r26, r26
 e8a:	bb 1b       	sub	r27, r27
 e8c:	51 e1       	ldi	r21, 0x11	; 17
 e8e:	07 c0       	rjmp	.+14     	; 0xe9e <__udivmodhi4_ep>

00000e90 <__udivmodhi4_loop>:
 e90:	aa 1f       	adc	r26, r26
 e92:	bb 1f       	adc	r27, r27
 e94:	a6 17       	cp	r26, r22
 e96:	b7 07       	cpc	r27, r23
 e98:	10 f0       	brcs	.+4      	; 0xe9e <__udivmodhi4_ep>
 e9a:	a6 1b       	sub	r26, r22
 e9c:	b7 0b       	sbc	r27, r23

00000e9e <__udivmodhi4_ep>:
 e9e:	88 1f       	adc	r24, r24
 ea0:	99 1f       	adc	r25, r25
 ea2:	5a 95       	dec	r21
 ea4:	a9 f7       	brne	.-22     	; 0xe90 <__udivmodhi4_loop>
 ea6:	80 95       	com	r24
 ea8:	90 95       	com	r25
 eaa:	bc 01       	movw	r22, r24
 eac:	cd 01       	movw	r24, r26
 eae:	08 95       	ret

00000eb0 <_exit>:
 eb0:	f8 94       	cli

00000eb2 <__stop_program>:
 eb2:	ff cf       	rjmp	.-2      	; 0xeb2 <__stop_program>
